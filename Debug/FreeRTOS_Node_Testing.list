
FreeRTOS_Node_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005960  08005960  00015960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a2c  08005a2c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005a2c  08005a2c  00015a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a34  08005a34  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a34  08005a34  00015a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a38  08005a38  00015a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a48  20000010  08005a4c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20004a58  08005a4c  00024a58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d0ec  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003692  00000000  00000000  0003d12c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e0  00000000  00000000  000407c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001158  00000000  00000000  00041aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000265cf  00000000  00000000  00042bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010f22  00000000  00000000  000691c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e1fdf  00000000  00000000  0007a0e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015c0c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d94  00000000  00000000  0015c144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005948 	.word	0x08005948

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08005948 	.word	0x08005948

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <s8CANInit>:
static int8_t s8CANFilterInit(void);
static void vCANSetStatusLED(const int8_t cs8CANStatus);


int8_t s8CANInit(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
   int8_t s8ErrorHandle = CAN_OKAY;
 80004f6:	2300      	movs	r3, #0
 80004f8:	71fb      	strb	r3, [r7, #7]

   if(CAN_ERROR == s8CANGeneralInit())
 80004fa:	f000 f88d 	bl	8000618 <s8CANGeneralInit>
 80004fe:	4603      	mov	r3, r0
 8000500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000504:	d101      	bne.n	800050a <s8CANInit+0x1a>
   {
      s8ErrorHandle = CAN_ERROR;
 8000506:	23ff      	movs	r3, #255	; 0xff
 8000508:	71fb      	strb	r3, [r7, #7]
   }

   if(CAN_ERROR == s8CANTxInit())
 800050a:	f000 f8a3 	bl	8000654 <s8CANTxInit>
 800050e:	4603      	mov	r3, r0
 8000510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000514:	d101      	bne.n	800051a <s8CANInit+0x2a>
   {
      s8ErrorHandle = CAN_ERROR;
 8000516:	23ff      	movs	r3, #255	; 0xff
 8000518:	71fb      	strb	r3, [r7, #7]
   }

   if(CAN_ERROR == s8CANFilterInit())
 800051a:	f000 f8b5 	bl	8000688 <s8CANFilterInit>
 800051e:	4603      	mov	r3, r0
 8000520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000524:	d101      	bne.n	800052a <s8CANInit+0x3a>
   {
      s8ErrorHandle = CAN_ERROR;
 8000526:	23ff      	movs	r3, #255	; 0xff
 8000528:	71fb      	strb	r3, [r7, #7]
   }

   vCANSetStatusLED(s8ErrorHandle);
 800052a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800052e:	4618      	mov	r0, r3
 8000530:	f000 f8d8 	bl	80006e4 <vCANSetStatusLED>

   return s8ErrorHandle;
 8000534:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <s8CANSendMessage>:


int8_t s8CANSendMessage(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
   int8_t s8ErrorHandle = CAN_OKAY;
 8000546:	2300      	movs	r3, #0
 8000548:	71fb      	strb	r3, [r7, #7]

   if(HAL_OK != HAL_CAN_AddTxMessage(&hcan1, &xCANTxHeader, (uint8_t*) cau8TxData, &u32CANTxBufferNumber))
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <s8CANSendMessage+0x38>)
 800054c:	4a0b      	ldr	r2, [pc, #44]	; (800057c <s8CANSendMessage+0x3c>)
 800054e:	490c      	ldr	r1, [pc, #48]	; (8000580 <s8CANSendMessage+0x40>)
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <s8CANSendMessage+0x44>)
 8000552:	f000 fe2d 	bl	80011b0 <HAL_CAN_AddTxMessage>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <s8CANSendMessage+0x20>
   {
      s8ErrorHandle = CAN_ERROR;
 800055c:	23ff      	movs	r3, #255	; 0xff
 800055e:	71fb      	strb	r3, [r7, #7]
   }

   vCANSetStatusLED(s8ErrorHandle);
 8000560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000564:	4618      	mov	r0, r3
 8000566:	f000 f8bd 	bl	80006e4 <vCANSetStatusLED>

   return s8ErrorHandle;
 800056a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000088 	.word	0x20000088
 800057c:	080059a4 	.word	0x080059a4
 8000580:	2000002c 	.word	0x2000002c
 8000584:	200049a0 	.word	0x200049a0

08000588 <s8CANReceiveMessage>:


int8_t s8CANReceiveMessage(uint8_t* const pu8Data)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
   int8_t s8ErrorHandle = CAN_OKAY;
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]
   uint8_t* pu8ReceiveBuffer = au8RxData;
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <s8CANReceiveMessage+0x7c>)
 8000596:	60bb      	str	r3, [r7, #8]

   if(NULL != pu8Data)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <s8CANReceiveMessage+0x1a>
   {
      pu8ReceiveBuffer = pu8Data;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	60bb      	str	r3, [r7, #8]
   }

   if(HAL_OK != HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &xCANRxHeader, pu8ReceiveBuffer))
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a18      	ldr	r2, [pc, #96]	; (8000608 <s8CANReceiveMessage+0x80>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4818      	ldr	r0, [pc, #96]	; (800060c <s8CANReceiveMessage+0x84>)
 80005aa:	f000 fedc 	bl	8001366 <HAL_CAN_GetRxMessage>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d002      	beq.n	80005ba <s8CANReceiveMessage+0x32>
   {
      s8ErrorHandle = CAN_ERROR;
 80005b4:	23ff      	movs	r3, #255	; 0xff
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	e019      	b.n	80005ee <s8CANReceiveMessage+0x66>
   }
   else
   {
      if(0u == memcmp(cau8TxData, pu8ReceiveBuffer, CAN_BUFFER_SIZE))
 80005ba:	2204      	movs	r2, #4
 80005bc:	68b9      	ldr	r1, [r7, #8]
 80005be:	4814      	ldr	r0, [pc, #80]	; (8000610 <s8CANReceiveMessage+0x88>)
 80005c0:	f005 f9a0 	bl	8005904 <memcmp>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d105      	bne.n	80005d6 <s8CANReceiveMessage+0x4e>
      {
         au32CANDataValidationCounters[CAN_INDEX_MESSAGE_VALID]++;
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <s8CANReceiveMessage+0x8c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	3301      	adds	r3, #1
 80005d0:	4a10      	ldr	r2, [pc, #64]	; (8000614 <s8CANReceiveMessage+0x8c>)
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	e006      	b.n	80005e4 <s8CANReceiveMessage+0x5c>
      }
      else
      {
         au32CANDataValidationCounters[CAN_INDEX_MESSAGE_INVALID]++;
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <s8CANReceiveMessage+0x8c>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	3301      	adds	r3, #1
 80005dc:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <s8CANReceiveMessage+0x8c>)
 80005de:	6053      	str	r3, [r2, #4]
         s8ErrorHandle = CAN_ERROR;
 80005e0:	23ff      	movs	r3, #255	; 0xff
 80005e2:	73fb      	strb	r3, [r7, #15]
      }

      memset(au8RxData, 0u, CAN_BUFFER_SIZE);
 80005e4:	2204      	movs	r2, #4
 80005e6:	2100      	movs	r1, #0
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <s8CANReceiveMessage+0x7c>)
 80005ea:	f005 f9a5 	bl	8005938 <memset>
   }

   vCANSetStatusLED(s8ErrorHandle);
 80005ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f876 	bl	80006e4 <vCANSetStatusLED>

   return s8ErrorHandle;
 80005f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000094 	.word	0x20000094
 8000608:	20000044 	.word	0x20000044
 800060c:	200049a0 	.word	0x200049a0
 8000610:	080059a4 	.word	0x080059a4
 8000614:	2000008c 	.word	0x2000008c

08000618 <s8CANGeneralInit>:


static int8_t s8CANGeneralInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
   int8_t s8ErrorHandle = CAN_OKAY;
 800061e:	2300      	movs	r3, #0
 8000620:	71fb      	strb	r3, [r7, #7]

   if(HAL_OK != HAL_CAN_Start(&hcan1))
 8000622:	480b      	ldr	r0, [pc, #44]	; (8000650 <s8CANGeneralInit+0x38>)
 8000624:	f000 fd80 	bl	8001128 <HAL_CAN_Start>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <s8CANGeneralInit+0x1a>
   {
      s8ErrorHandle = CAN_ERROR;
 800062e:	23ff      	movs	r3, #255	; 0xff
 8000630:	71fb      	strb	r3, [r7, #7]
   }

   if(HAL_OK != HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8000632:	2102      	movs	r1, #2
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <s8CANGeneralInit+0x38>)
 8000636:	f000 ffa8 	bl	800158a <HAL_CAN_ActivateNotification>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <s8CANGeneralInit+0x2c>
   {
      s8ErrorHandle = CAN_ERROR;
 8000640:	23ff      	movs	r3, #255	; 0xff
 8000642:	71fb      	strb	r3, [r7, #7]
   }

   return s8ErrorHandle;
 8000644:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200049a0 	.word	0x200049a0

08000654 <s8CANTxInit>:

static int8_t s8CANTxInit(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
   xCANTxHeader.IDE = CAN_ID_STD;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <s8CANTxInit+0x30>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
   xCANTxHeader.StdId = cu32TxId;
 800065e:	2200      	movs	r2, #0
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <s8CANTxInit+0x30>)
 8000662:	601a      	str	r2, [r3, #0]
   xCANTxHeader.RTR = CAN_RTR_DATA;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <s8CANTxInit+0x30>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
   xCANTxHeader.DLC = CAN_BUFFER_SIZE;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <s8CANTxInit+0x30>)
 800066c:	2204      	movs	r2, #4
 800066e:	611a      	str	r2, [r3, #16]
   xCANTxHeader.TransmitGlobalTime = DISABLE;
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <s8CANTxInit+0x30>)
 8000672:	2200      	movs	r2, #0
 8000674:	751a      	strb	r2, [r3, #20]

   return CAN_OKAY;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	2000002c 	.word	0x2000002c

08000688 <s8CANFilterInit>:


static int8_t s8CANFilterInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
   int8_t s8ErrorHandle = CAN_OKAY;
 800068e:	2300      	movs	r3, #0
 8000690:	71fb      	strb	r3, [r7, #7]

   xCANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <s8CANFilterInit+0x54>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
   xCANFilter.FilterIdHigh = cu32TxId << 5u;
 8000698:	2300      	movs	r3, #0
 800069a:	015b      	lsls	r3, r3, #5
 800069c:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <s8CANFilterInit+0x54>)
 800069e:	6013      	str	r3, [r2, #0]
   xCANFilter.FilterIdLow = 0u;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <s8CANFilterInit+0x54>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	605a      	str	r2, [r3, #4]
   xCANFilter.FilterMaskIdHigh = 0u;
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <s8CANFilterInit+0x54>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
   xCANFilter.FilterMaskIdLow = 0u;
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <s8CANFilterInit+0x54>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
   xCANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <s8CANFilterInit+0x54>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	61da      	str	r2, [r3, #28]
   xCANFilter.FilterActivation = CAN_FILTER_ENABLE;
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <s8CANFilterInit+0x54>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	621a      	str	r2, [r3, #32]

   if(HAL_OK != HAL_CAN_ConfigFilter(&hcan1, &xCANFilter))
 80006be:	4907      	ldr	r1, [pc, #28]	; (80006dc <s8CANFilterInit+0x54>)
 80006c0:	4807      	ldr	r0, [pc, #28]	; (80006e0 <s8CANFilterInit+0x58>)
 80006c2:	f000 fc51 	bl	8000f68 <HAL_CAN_ConfigFilter>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <s8CANFilterInit+0x48>
   {
      s8ErrorHandle = CAN_ERROR;
 80006cc:	23ff      	movs	r3, #255	; 0xff
 80006ce:	71fb      	strb	r3, [r7, #7]
   }

   return s8ErrorHandle;
 80006d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000060 	.word	0x20000060
 80006e0:	200049a0 	.word	0x200049a0

080006e4 <vCANSetStatusLED>:


static void vCANSetStatusLED(const int8_t cs8CANStatus)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
   (CAN_OKAY == cs8CANStatus) ? vLEDStatusOkaySet() : vLEDStatusErrorSet();
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d102      	bne.n	80006fc <vCANSetStatusLED+0x18>
 80006f6:	f000 f807 	bl	8000708 <vLEDStatusOkaySet>
}
 80006fa:	e001      	b.n	8000700 <vCANSetStatusLED+0x1c>
   (CAN_OKAY == cs8CANStatus) ? vLEDStatusOkaySet() : vLEDStatusErrorSet();
 80006fc:	f000 f816 	bl	800072c <vLEDStatusErrorSet>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <vLEDStatusOkaySet>:

#include "BFFT.h"


void vLEDStatusOkaySet(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(LED_StatusOkay_GPIO_Port, LED_StatusOkay_Pin, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <vLEDStatusOkaySet+0x20>)
 8000714:	f001 fc1e 	bl	8001f54 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_StatusError_GPIO_Port, LED_StatusError_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071e:	4802      	ldr	r0, [pc, #8]	; (8000728 <vLEDStatusOkaySet+0x20>)
 8000720:	f001 fc18 	bl	8001f54 <HAL_GPIO_WritePin>
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021800 	.word	0x40021800

0800072c <vLEDStatusErrorSet>:

void vLEDStatusErrorSet(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(LED_StatusOkay_GPIO_Port, LED_StatusOkay_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <vLEDStatusErrorSet+0x20>)
 8000738:	f001 fc0c 	bl	8001f54 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_StatusError_GPIO_Port, LED_StatusError_Pin, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000742:	4802      	ldr	r0, [pc, #8]	; (800074c <vLEDStatusErrorSet+0x20>)
 8000744:	f001 fc06 	bl	8001f54 <HAL_GPIO_WritePin>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40021800 	.word	0x40021800

08000750 <vLEDSystemAliveToggle>:

void vLEDSystemAliveToggle(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
   HAL_GPIO_TogglePin(LED_SystemAlive_GPIO_Port, LED_SystemAlive_Pin);
 8000754:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000758:	4802      	ldr	r0, [pc, #8]	; (8000764 <vLEDSystemAliveToggle+0x14>)
 800075a:	f001 fc14 	bl	8001f86 <HAL_GPIO_TogglePin>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40021800 	.word	0x40021800

08000768 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_CAN1_Init+0x68>)
 800076e:	4a19      	ldr	r2, [pc, #100]	; (80007d4 <MX_CAN1_Init+0x6c>)
 8000770:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 25;
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_CAN1_Init+0x68>)
 8000774:	2219      	movs	r2, #25
 8000776:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_SILENT;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_CAN1_Init+0x68>)
 800077a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800077e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_CAN1_Init+0x68>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_CAN1_Init+0x68>)
 8000788:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800078c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_CAN1_Init+0x68>)
 8000790:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000794:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_CAN1_Init+0x68>)
 8000798:	2200      	movs	r2, #0
 800079a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_CAN1_Init+0x68>)
 800079e:	2200      	movs	r2, #0
 80007a0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_CAN1_Init+0x68>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_CAN1_Init+0x68>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_CAN1_Init+0x68>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_CAN1_Init+0x68>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_CAN1_Init+0x68>)
 80007bc:	f000 fad8 	bl	8000d70 <HAL_CAN_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80007c6:	f000 f99b 	bl	8000b00 <Error_Handler>
  }

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200049a0 	.word	0x200049a0
 80007d4:	40006400 	.word	0x40006400

080007d8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a1d      	ldr	r2, [pc, #116]	; (800086c <HAL_CAN_MspInit+0x94>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d134      	bne.n	8000864 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <HAL_CAN_MspInit+0x98>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <HAL_CAN_MspInit+0x98>)
 8000804:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <HAL_CAN_MspInit+0x98>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_CAN_MspInit+0x98>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a14      	ldr	r2, [pc, #80]	; (8000870 <HAL_CAN_MspInit+0x98>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_CAN_MspInit+0x98>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000832:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000840:	2303      	movs	r3, #3
 8000842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000844:	2309      	movs	r3, #9
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4809      	ldr	r0, [pc, #36]	; (8000874 <HAL_CAN_MspInit+0x9c>)
 8000850:	f001 f9d6 	bl	8001c00 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2105      	movs	r1, #5
 8000858:	2014      	movs	r0, #20
 800085a:	f001 f9a7 	bl	8001bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800085e:	2014      	movs	r0, #20
 8000860:	f001 f9c0 	bl	8001be4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	; 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40006400 	.word	0x40006400
 8000870:	40023800 	.word	0x40023800
 8000874:	40020000 	.word	0x40020000

08000878 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800088c:	4a0c      	ldr	r2, [pc, #48]	; (80008c0 <MX_FREERTOS_Init+0x38>)
 800088e:	2100      	movs	r1, #0
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <MX_FREERTOS_Init+0x3c>)
 8000892:	f002 fac3 	bl	8002e1c <osThreadNew>
 8000896:	4602      	mov	r2, r0
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_FREERTOS_Init+0x40>)
 800089a:	601a      	str	r2, [r3, #0]

  /* creation of ThreadCANSendMe */
  ThreadCANSendMeHandle = osThreadNew(vThreadCANSendMessage, NULL, &ThreadCANSendMe_attributes);
 800089c:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <MX_FREERTOS_Init+0x44>)
 800089e:	2100      	movs	r1, #0
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <MX_FREERTOS_Init+0x48>)
 80008a2:	f002 fabb 	bl	8002e1c <osThreadNew>
 80008a6:	4602      	mov	r2, r0
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_FREERTOS_Init+0x4c>)
 80008aa:	601a      	str	r2, [r3, #0]

  /* creation of ThreadLEDSystem */
  ThreadLEDSystemHandle = osThreadNew(vThreadLEDSystemAlive, NULL, &ThreadLEDSystem_attributes);
 80008ac:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <MX_FREERTOS_Init+0x50>)
 80008ae:	2100      	movs	r1, #0
 80008b0:	480a      	ldr	r0, [pc, #40]	; (80008dc <MX_FREERTOS_Init+0x54>)
 80008b2:	f002 fab3 	bl	8002e1c <osThreadNew>
 80008b6:	4602      	mov	r2, r0
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_FREERTOS_Init+0x58>)
 80008ba:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	080059a8 	.word	0x080059a8
 80008c4:	080008e5 	.word	0x080008e5
 80008c8:	200049cc 	.word	0x200049cc
 80008cc:	080059cc 	.word	0x080059cc
 80008d0:	080008f5 	.word	0x080008f5
 80008d4:	200049c8 	.word	0x200049c8
 80008d8:	080059f0 	.word	0x080059f0
 80008dc:	08000917 	.word	0x08000917
 80008e0:	200049d0 	.word	0x200049d0

080008e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f002 fb3b 	bl	8002f68 <osDelay>
 80008f2:	e7fb      	b.n	80008ec <StartDefaultTask+0x8>

080008f4 <vThreadCANSendMessage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vThreadCANSendMessage */
void vThreadCANSendMessage(void *argument)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vThreadCANSendMessage */
  /* Infinite loop */
   TickType_t xPreviousWakeTime = xTaskGetTickCount();
 80008fc:	f003 fc78 	bl	80041f0 <xTaskGetTickCount>
 8000900:	4603      	mov	r3, r0
 8000902:	60fb      	str	r3, [r7, #12]

   while(1)
   {

      s8CANSendMessage();
 8000904:	f7ff fe1c 	bl	8000540 <s8CANSendMessage>
      vTaskDelayUntil(&xPreviousWakeTime, 5u/portTICK_RATE_MS);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2105      	movs	r1, #5
 800090e:	4618      	mov	r0, r3
 8000910:	f003 fab2 	bl	8003e78 <vTaskDelayUntil>
      s8CANSendMessage();
 8000914:	e7f6      	b.n	8000904 <vThreadCANSendMessage+0x10>

08000916 <vThreadLEDSystemAlive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vThreadLEDSystemAlive */
void vThreadLEDSystemAlive(void *argument)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b084      	sub	sp, #16
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vThreadLEDSystemAlive */
  /* Infinite loop */
   TickType_t xPreviousWakeTime = xTaskGetTickCount();
 800091e:	f003 fc67 	bl	80041f0 <xTaskGetTickCount>
 8000922:	4603      	mov	r3, r0
 8000924:	60fb      	str	r3, [r7, #12]

   while(1)
   {

      vLEDSystemAliveToggle();
 8000926:	f7ff ff13 	bl	8000750 <vLEDSystemAliveToggle>
      vTaskDelayUntil(&xPreviousWakeTime, 250u/portTICK_RATE_MS);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	21fa      	movs	r1, #250	; 0xfa
 8000930:	4618      	mov	r0, r3
 8000932:	f003 faa1 	bl	8003e78 <vTaskDelayUntil>
      vLEDSystemAliveToggle();
 8000936:	e7f6      	b.n	8000926 <vThreadLEDSystemAlive+0x10>

08000938 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <MX_GPIO_Init+0x9c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a1f      	ldr	r2, [pc, #124]	; (80009d4 <MX_GPIO_Init+0x9c>)
 8000958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_GPIO_Init+0x9c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_GPIO_Init+0x9c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <MX_GPIO_Init+0x9c>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_GPIO_Init+0x9c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_GPIO_Init+0x9c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a11      	ldr	r2, [pc, #68]	; (80009d4 <MX_GPIO_Init+0x9c>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_GPIO_Init+0x9c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_SystemAlive_Pin|LED_StatusOkay_Pin|LED_StatusError_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80009a8:	480b      	ldr	r0, [pc, #44]	; (80009d8 <MX_GPIO_Init+0xa0>)
 80009aa:	f001 fad3 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED_SystemAlive_Pin|LED_StatusOkay_Pin|LED_StatusError_Pin;
 80009ae:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80009b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4619      	mov	r1, r3
 80009c6:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_GPIO_Init+0xa0>)
 80009c8:	f001 f91a 	bl	8001c00 <HAL_GPIO_Init>

}
 80009cc:	bf00      	nop
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40021800 	.word	0x40021800

080009dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e0:	f000 f984 	bl	8000cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e4:	f000 f80e 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e8:	f7ff ffa6 	bl	8000938 <MX_GPIO_Init>
  MX_CAN1_Init();
 80009ec:	f7ff febc 	bl	8000768 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  s8CANInit();
 80009f0:	f7ff fd7e 	bl	80004f0 <s8CANInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80009f4:	f002 f9a8 	bl	8002d48 <osKernelInitialize>
  MX_FREERTOS_Init();
 80009f8:	f7ff ff46 	bl	8000888 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80009fc:	f002 f9d8 	bl	8002db0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <main+0x24>
	...

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b094      	sub	sp, #80	; 0x50
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 0320 	add.w	r3, r7, #32
 8000a0e:	2230      	movs	r2, #48	; 0x30
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f004 ff90 	bl	8005938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <SystemClock_Config+0xd0>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	4a28      	ldr	r2, [pc, #160]	; (8000ad4 <SystemClock_Config+0xd0>)
 8000a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40
 8000a38:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <SystemClock_Config+0xd0>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <SystemClock_Config+0xd4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a50:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <SystemClock_Config+0xd4>)
 8000a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <SystemClock_Config+0xd4>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a64:	2301      	movs	r3, #1
 8000a66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000a7c:	2364      	movs	r3, #100	; 0x64
 8000a7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a84:	2303      	movs	r3, #3
 8000a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a88:	f107 0320 	add.w	r3, r7, #32
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 fa95 	bl	8001fbc <HAL_RCC_OscConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a98:	f000 f832 	bl	8000b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aa8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	2103      	movs	r1, #3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 fcee 	bl	800249c <HAL_RCC_ClockConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ac6:	f000 f81b 	bl	8000b00 <Error_Handler>
  }
}
 8000aca:	bf00      	nop
 8000acc:	3750      	adds	r7, #80	; 0x50
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40007000 	.word	0x40007000

08000adc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d101      	bne.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aee:	f000 f91f 	bl	8000d30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40010000 	.word	0x40010000

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <Error_Handler+0x6>

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_MspInit+0x54>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a11      	ldr	r2, [pc, #68]	; (8000b5c <HAL_MspInit+0x54>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_MspInit+0x54>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_MspInit+0x54>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_MspInit+0x54>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_MspInit+0x54>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	210f      	movs	r1, #15
 8000b4a:	f06f 0001 	mvn.w	r0, #1
 8000b4e:	f001 f82d 	bl	8001bac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	2019      	movs	r0, #25
 8000b76:	f001 f819 	bl	8001bac <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b7a:	2019      	movs	r0, #25
 8000b7c:	f001 f832 	bl	8001be4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <HAL_InitTick+0xa4>)
 8000b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b88:	4a1e      	ldr	r2, [pc, #120]	; (8000c04 <HAL_InitTick+0xa4>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <HAL_InitTick+0xa4>)
 8000b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b9c:	f107 0210 	add.w	r2, r7, #16
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 fe56 	bl	8002858 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000bac:	f001 fe40 	bl	8002830 <HAL_RCC_GetPCLK2Freq>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb8:	4a13      	ldr	r2, [pc, #76]	; (8000c08 <HAL_InitTick+0xa8>)
 8000bba:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbe:	0c9b      	lsrs	r3, r3, #18
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_InitTick+0xac>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <HAL_InitTick+0xb0>)
 8000bc8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <HAL_InitTick+0xac>)
 8000bcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bd0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <HAL_InitTick+0xac>)
 8000bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <HAL_InitTick+0xac>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_InitTick+0xac>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000be4:	4809      	ldr	r0, [pc, #36]	; (8000c0c <HAL_InitTick+0xac>)
 8000be6:	f001 fe69 	bl	80028bc <HAL_TIM_Base_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d104      	bne.n	8000bfa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000bf0:	4806      	ldr	r0, [pc, #24]	; (8000c0c <HAL_InitTick+0xac>)
 8000bf2:	f001 fe98 	bl	8002926 <HAL_TIM_Base_Start_IT>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	e000      	b.n	8000bfc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3730      	adds	r7, #48	; 0x30
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800
 8000c08:	431bde83 	.word	0x431bde83
 8000c0c:	200049d4 	.word	0x200049d4
 8000c10:	40010000 	.word	0x40010000

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <NMI_Handler+0x4>

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <CAN1_RX0_IRQHandler+0x14>)
 8000c46:	f000 fcc6 	bl	80015d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  s8CANReceiveMessage(NULL);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff fc9c 	bl	8000588 <s8CANReceiveMessage>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200049a0 	.word	0x200049a0

08000c58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c5e:	f001 fe86 	bl	800296e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200049d4 	.word	0x200049d4

08000c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <SystemInit+0x28>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c76:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <SystemInit+0x28>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SystemInit+0x28>)
 8000c82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c86:	609a      	str	r2, [r3, #8]
#endif
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c9e:	e003      	b.n	8000ca8 <LoopCopyDataInit>

08000ca0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ca2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ca4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ca6:	3104      	adds	r1, #4

08000ca8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ca8:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cb0:	d3f6      	bcc.n	8000ca0 <CopyDataInit>
  ldr  r2, =_sbss
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cb4:	e002      	b.n	8000cbc <LoopFillZerobss>

08000cb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cb8:	f842 3b04 	str.w	r3, [r2], #4

08000cbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cc0:	d3f9      	bcc.n	8000cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cc2:	f7ff ffd3 	bl	8000c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f004 fdf9 	bl	80058bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cca:	f7ff fe87 	bl	80009dc <main>
  bx  lr    
 8000cce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cd0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000cd4:	08005a3c 	.word	0x08005a3c
  ldr  r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cdc:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000ce0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000ce4:	20004a58 	.word	0x20004a58

08000ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC_IRQHandler>
	...

08000cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <HAL_Init+0x40>)
 8000cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_Init+0x40>)
 8000d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <HAL_Init+0x40>)
 8000d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 ff3e 	bl	8001b96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f7ff ff20 	bl	8000b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d20:	f7ff fef2 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023c00 	.word	0x40023c00

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20004a14 	.word	0x20004a14

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20004a14 	.word	0x20004a14

08000d70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e0ed      	b.n	8000f5e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d102      	bne.n	8000d94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff fd22 	bl	80007d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 0202 	bic.w	r2, r2, #2
 8000da2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000da4:	f7ff ffd8 	bl	8000d58 <HAL_GetTick>
 8000da8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000daa:	e012      	b.n	8000dd2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dac:	f7ff ffd4 	bl	8000d58 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b0a      	cmp	r3, #10
 8000db8:	d90b      	bls.n	8000dd2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2205      	movs	r2, #5
 8000dca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e0c5      	b.n	8000f5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1e5      	bne.n	8000dac <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 0201 	orr.w	r2, r2, #1
 8000dee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000df0:	f7ff ffb2 	bl	8000d58 <HAL_GetTick>
 8000df4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000df6:	e012      	b.n	8000e1e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000df8:	f7ff ffae 	bl	8000d58 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b0a      	cmp	r3, #10
 8000e04:	d90b      	bls.n	8000e1e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2205      	movs	r2, #5
 8000e16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e09f      	b.n	8000f5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0e5      	beq.n	8000df8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7e1b      	ldrb	r3, [r3, #24]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d108      	bne.n	8000e46 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	e007      	b.n	8000e56 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7e5b      	ldrb	r3, [r3, #25]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d108      	bne.n	8000e70 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	e007      	b.n	8000e80 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7e9b      	ldrb	r3, [r3, #26]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d108      	bne.n	8000e9a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 0220 	orr.w	r2, r2, #32
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	e007      	b.n	8000eaa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0220 	bic.w	r2, r2, #32
 8000ea8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7edb      	ldrb	r3, [r3, #27]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d108      	bne.n	8000ec4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0210 	bic.w	r2, r2, #16
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	e007      	b.n	8000ed4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 0210 	orr.w	r2, r2, #16
 8000ed2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7f1b      	ldrb	r3, [r3, #28]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d108      	bne.n	8000eee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0208 	orr.w	r2, r2, #8
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	e007      	b.n	8000efe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0208 	bic.w	r2, r2, #8
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7f5b      	ldrb	r3, [r3, #29]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d108      	bne.n	8000f18 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f042 0204 	orr.w	r2, r2, #4
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e007      	b.n	8000f28 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0204 	bic.w	r2, r2, #4
 8000f26:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	431a      	orrs	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	431a      	orrs	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	ea42 0103 	orr.w	r1, r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	1e5a      	subs	r2, r3, #1
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f80:	7cfb      	ldrb	r3, [r7, #19]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d003      	beq.n	8000f8e <HAL_CAN_ConfigFilter+0x26>
 8000f86:	7cfb      	ldrb	r3, [r7, #19]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	f040 80be 	bne.w	800110a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f8e:	4b65      	ldr	r3, [pc, #404]	; (8001124 <HAL_CAN_ConfigFilter+0x1bc>)
 8000f90:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f98:	f043 0201 	orr.w	r2, r3, #1
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fa8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	f003 031f 	and.w	r3, r3, #31
 8000fce:	2201      	movs	r2, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	69db      	ldr	r3, [r3, #28]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d123      	bne.n	8001038 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001012:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	3248      	adds	r2, #72	; 0x48
 8001018:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800102c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800102e:	6979      	ldr	r1, [r7, #20]
 8001030:	3348      	adds	r3, #72	; 0x48
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	440b      	add	r3, r1
 8001036:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d122      	bne.n	8001086 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	431a      	orrs	r2, r3
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001060:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3248      	adds	r2, #72	; 0x48
 8001066:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800107a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800107c:	6979      	ldr	r1, [r7, #20]
 800107e:	3348      	adds	r3, #72	; 0x48
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	440b      	add	r3, r1
 8001084:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d109      	bne.n	80010a2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	43db      	mvns	r3, r3
 8001098:	401a      	ands	r2, r3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80010a0:	e007      	b.n	80010b2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	431a      	orrs	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d109      	bne.n	80010ce <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	401a      	ands	r2, r3
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80010cc:	e007      	b.n	80010de <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	431a      	orrs	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d107      	bne.n	80010f6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	431a      	orrs	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010fc:	f023 0201 	bic.w	r2, r3, #1
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e006      	b.n	8001118 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
  }
}
 8001118:	4618      	mov	r0, r3
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	40006400 	.word	0x40006400

08001128 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b01      	cmp	r3, #1
 800113a:	d12e      	bne.n	800119a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2202      	movs	r2, #2
 8001140:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0201 	bic.w	r2, r2, #1
 8001152:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001154:	f7ff fe00 	bl	8000d58 <HAL_GetTick>
 8001158:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800115a:	e012      	b.n	8001182 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800115c:	f7ff fdfc 	bl	8000d58 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b0a      	cmp	r3, #10
 8001168:	d90b      	bls.n	8001182 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2205      	movs	r2, #5
 800117a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e012      	b.n	80011a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1e5      	bne.n	800115c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	e006      	b.n	80011a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
  }
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80011ce:	7ffb      	ldrb	r3, [r7, #31]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d003      	beq.n	80011dc <HAL_CAN_AddTxMessage+0x2c>
 80011d4:	7ffb      	ldrb	r3, [r7, #31]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	f040 80b8 	bne.w	800134c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10a      	bne.n	80011fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d105      	bne.n	80011fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80a0 	beq.w	800133c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	0e1b      	lsrs	r3, r3, #24
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d907      	bls.n	800121c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e09e      	b.n	800135a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800121c:	2201      	movs	r2, #1
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	409a      	lsls	r2, r3
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10d      	bne.n	800124a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001238:	68f9      	ldr	r1, [r7, #12]
 800123a:	6809      	ldr	r1, [r1, #0]
 800123c:	431a      	orrs	r2, r3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3318      	adds	r3, #24
 8001242:	011b      	lsls	r3, r3, #4
 8001244:	440b      	add	r3, r1
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e00f      	b.n	800126a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001254:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800125a:	68f9      	ldr	r1, [r7, #12]
 800125c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800125e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3318      	adds	r3, #24
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	440b      	add	r3, r1
 8001268:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6819      	ldr	r1, [r3, #0]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	691a      	ldr	r2, [r3, #16]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3318      	adds	r3, #24
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	440b      	add	r3, r1
 800127a:	3304      	adds	r3, #4
 800127c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	7d1b      	ldrb	r3, [r3, #20]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d111      	bne.n	80012aa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3318      	adds	r3, #24
 800128e:	011b      	lsls	r3, r3, #4
 8001290:	4413      	add	r3, r2
 8001292:	3304      	adds	r3, #4
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	6811      	ldr	r1, [r2, #0]
 800129a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3318      	adds	r3, #24
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	440b      	add	r3, r1
 80012a6:	3304      	adds	r3, #4
 80012a8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3307      	adds	r3, #7
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	061a      	lsls	r2, r3, #24
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3306      	adds	r3, #6
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	041b      	lsls	r3, r3, #16
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3305      	adds	r3, #5
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	4313      	orrs	r3, r2
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	3204      	adds	r2, #4
 80012ca:	7812      	ldrb	r2, [r2, #0]
 80012cc:	4610      	mov	r0, r2
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	6811      	ldr	r1, [r2, #0]
 80012d2:	ea43 0200 	orr.w	r2, r3, r0
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	440b      	add	r3, r1
 80012dc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80012e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3303      	adds	r3, #3
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	061a      	lsls	r2, r3, #24
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3302      	adds	r3, #2
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	041b      	lsls	r3, r3, #16
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3301      	adds	r3, #1
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	4313      	orrs	r3, r2
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	7812      	ldrb	r2, [r2, #0]
 8001302:	4610      	mov	r0, r2
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	6811      	ldr	r1, [r2, #0]
 8001308:	ea43 0200 	orr.w	r2, r3, r0
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	440b      	add	r3, r1
 8001312:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001316:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	3318      	adds	r3, #24
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	4413      	add	r3, r2
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	6811      	ldr	r1, [r2, #0]
 800132a:	f043 0201 	orr.w	r2, r3, #1
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3318      	adds	r3, #24
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	440b      	add	r3, r1
 8001336:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001338:	2300      	movs	r3, #0
 800133a:	e00e      	b.n	800135a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e006      	b.n	800135a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
  }
}
 800135a:	4618      	mov	r0, r3
 800135c:	3724      	adds	r7, #36	; 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001366:	b480      	push	{r7}
 8001368:	b087      	sub	sp, #28
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800137a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800137c:	7dfb      	ldrb	r3, [r7, #23]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d003      	beq.n	800138a <HAL_CAN_GetRxMessage+0x24>
 8001382:	7dfb      	ldrb	r3, [r7, #23]
 8001384:	2b02      	cmp	r3, #2
 8001386:	f040 80f3 	bne.w	8001570 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10e      	bne.n	80013ae <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d116      	bne.n	80013cc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e0e7      	b.n	800157e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d107      	bne.n	80013cc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0d8      	b.n	800157e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	331b      	adds	r3, #27
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	4413      	add	r3, r2
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0204 	and.w	r2, r3, #4
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10c      	bne.n	8001404 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	331b      	adds	r3, #27
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	0d5b      	lsrs	r3, r3, #21
 80013fa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e00b      	b.n	800141c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	331b      	adds	r3, #27
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	4413      	add	r3, r2
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	08db      	lsrs	r3, r3, #3
 8001414:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	331b      	adds	r3, #27
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	4413      	add	r3, r2
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0202 	and.w	r2, r3, #2
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	331b      	adds	r3, #27
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	4413      	add	r3, r2
 800143e:	3304      	adds	r3, #4
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 020f 	and.w	r2, r3, #15
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	331b      	adds	r3, #27
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	3304      	adds	r3, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	b2da      	uxtb	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	331b      	adds	r3, #27
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	4413      	add	r3, r2
 800146e:	3304      	adds	r3, #4
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	0c1b      	lsrs	r3, r3, #16
 8001474:	b29a      	uxth	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	4413      	add	r3, r2
 8001484:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	4413      	add	r3, r2
 800149a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	0a1a      	lsrs	r2, r3, #8
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	4413      	add	r3, r2
 80014b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	0c1a      	lsrs	r2, r3, #16
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	3302      	adds	r3, #2
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	4413      	add	r3, r2
 80014ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	0e1a      	lsrs	r2, r3, #24
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	3303      	adds	r3, #3
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	4413      	add	r3, r2
 80014e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	3304      	adds	r3, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	4413      	add	r3, r2
 8001500:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	0a1a      	lsrs	r2, r3, #8
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	3305      	adds	r3, #5
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	4413      	add	r3, r2
 800151a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0c1a      	lsrs	r2, r3, #16
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	3306      	adds	r3, #6
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	4413      	add	r3, r2
 8001534:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	0e1a      	lsrs	r2, r3, #24
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	3307      	adds	r3, #7
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d108      	bne.n	800155c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0220 	orr.w	r2, r2, #32
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	e007      	b.n	800156c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	691a      	ldr	r2, [r3, #16]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0220 	orr.w	r2, r2, #32
 800156a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	e006      	b.n	800157e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
  }
}
 800157e:	4618      	mov	r0, r3
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800158a:	b480      	push	{r7}
 800158c:	b085      	sub	sp, #20
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d002      	beq.n	80015a8 <HAL_CAN_ActivateNotification+0x1e>
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d109      	bne.n	80015bc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6959      	ldr	r1, [r3, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e006      	b.n	80015ca <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
  }
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b08a      	sub	sp, #40	; 0x28
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d07c      	beq.n	8001716 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d023      	beq.n	800166e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2201      	movs	r2, #1
 800162c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f97d 	bl	8001938 <HAL_CAN_TxMailbox0CompleteCallback>
 800163e:	e016      	b.n	800166e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	2b00      	cmp	r3, #0
 8001648:	d004      	beq.n	8001654 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
 8001652:	e00c      	b.n	800166e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d004      	beq.n	8001668 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
 8001666:	e002      	b.n	800166e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f983 	bl	8001974 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d024      	beq.n	80016c2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001680:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f95d 	bl	800194c <HAL_CAN_TxMailbox1CompleteCallback>
 8001692:	e016      	b.n	80016c2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169a:	2b00      	cmp	r3, #0
 800169c:	d004      	beq.n	80016a8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
 80016a6:	e00c      	b.n	80016c2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ba:	e002      	b.n	80016c2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f963 	bl	8001988 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d024      	beq.n	8001716 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f93d 	bl	8001960 <HAL_CAN_TxMailbox2CompleteCallback>
 80016e6:	e016      	b.n	8001716 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d004      	beq.n	80016fc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
 80016fa:	e00c      	b.n	8001716 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d004      	beq.n	8001710 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
 800170e:	e002      	b.n	8001716 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f943 	bl	800199c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00c      	beq.n	800173a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	2b00      	cmp	r3, #0
 8001728:	d007      	beq.n	800173a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001730:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2210      	movs	r2, #16
 8001738:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00b      	beq.n	800175c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d006      	beq.n	800175c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2208      	movs	r2, #8
 8001754:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f934 	bl	80019c4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d009      	beq.n	800177a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f91b 	bl	80019b0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00c      	beq.n	800179e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001794:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2210      	movs	r2, #16
 800179c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	f003 0320 	and.w	r3, r3, #32
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00b      	beq.n	80017c0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2208      	movs	r2, #8
 80017b8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f916 	bl	80019ec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d009      	beq.n	80017de <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f8fd 	bl	80019d8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00b      	beq.n	8001800 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2210      	movs	r2, #16
 80017f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f900 	bl	8001a00 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00b      	beq.n	8001822 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2208      	movs	r2, #8
 800181a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f8f9 	bl	8001a14 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d075      	beq.n	8001918 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	2b00      	cmp	r3, #0
 8001834:	d06c      	beq.n	8001910 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001890:	2b00      	cmp	r3, #0
 8001892:	d03d      	beq.n	8001910 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800189a:	2b00      	cmp	r3, #0
 800189c:	d038      	beq.n	8001910 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018a4:	2b30      	cmp	r3, #48	; 0x30
 80018a6:	d017      	beq.n	80018d8 <HAL_CAN_IRQHandler+0x302>
 80018a8:	2b30      	cmp	r3, #48	; 0x30
 80018aa:	d804      	bhi.n	80018b6 <HAL_CAN_IRQHandler+0x2e0>
 80018ac:	2b10      	cmp	r3, #16
 80018ae:	d009      	beq.n	80018c4 <HAL_CAN_IRQHandler+0x2ee>
 80018b0:	2b20      	cmp	r3, #32
 80018b2:	d00c      	beq.n	80018ce <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80018b4:	e024      	b.n	8001900 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80018b6:	2b50      	cmp	r3, #80	; 0x50
 80018b8:	d018      	beq.n	80018ec <HAL_CAN_IRQHandler+0x316>
 80018ba:	2b60      	cmp	r3, #96	; 0x60
 80018bc:	d01b      	beq.n	80018f6 <HAL_CAN_IRQHandler+0x320>
 80018be:	2b40      	cmp	r3, #64	; 0x40
 80018c0:	d00f      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x30c>
            break;
 80018c2:	e01d      	b.n	8001900 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018cc:	e018      	b.n	8001900 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	f043 0310 	orr.w	r3, r3, #16
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018d6:	e013      	b.n	8001900 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	f043 0320 	orr.w	r3, r3, #32
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018e0:	e00e      	b.n	8001900 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018ea:	e009      	b.n	8001900 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018f4:	e004      	b.n	8001900 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018fe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699a      	ldr	r2, [r3, #24]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800190e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2204      	movs	r2, #4
 8001916:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	2b00      	cmp	r3, #0
 800191c:	d008      	beq.n	8001930 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f87c 	bl	8001a28 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001930:	bf00      	nop
 8001932:	3728      	adds	r7, #40	; 0x28
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6e:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	60d3      	str	r3, [r2, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <__NVIC_GetPriorityGrouping+0x18>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	f003 0307 	and.w	r3, r3, #7
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db0b      	blt.n	8001aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	4907      	ldr	r1, [pc, #28]	; (8001ad8 <__NVIC_EnableIRQ+0x38>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000e100 	.word	0xe000e100

08001adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	; (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	; (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	; 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f1c3 0307 	rsb	r3, r3, #7
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	bf28      	it	cs
 8001b4e:	2304      	movcs	r3, #4
 8001b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3304      	adds	r3, #4
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d902      	bls.n	8001b60 <NVIC_EncodePriority+0x30>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	e000      	b.n	8001b62 <NVIC_EncodePriority+0x32>
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	4313      	orrs	r3, r2
         );
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	; 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ff4c 	bl	8001a3c <__NVIC_SetPriorityGrouping>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbe:	f7ff ff61 	bl	8001a84 <__NVIC_GetPriorityGrouping>
 8001bc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	6978      	ldr	r0, [r7, #20]
 8001bca:	f7ff ffb1 	bl	8001b30 <NVIC_EncodePriority>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ff80 	bl	8001adc <__NVIC_SetPriority>
}
 8001bdc:	bf00      	nop
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ff54 	bl	8001aa0 <__NVIC_EnableIRQ>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	e177      	b.n	8001f0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	f040 8166 	bne.w	8001f06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d00b      	beq.n	8001c5a <HAL_GPIO_Init+0x5a>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d007      	beq.n	8001c5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c4e:	2b11      	cmp	r3, #17
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b12      	cmp	r3, #18
 8001c58:	d130      	bne.n	8001cbc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c90:	2201      	movs	r2, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 0201 	and.w	r2, r3, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0xfc>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b12      	cmp	r3, #18
 8001cfa:	d123      	bne.n	8001d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	08da      	lsrs	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3208      	adds	r2, #8
 8001d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	220f      	movs	r2, #15
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	08da      	lsrs	r2, r3, #3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3208      	adds	r2, #8
 8001d3e:	69b9      	ldr	r1, [r7, #24]
 8001d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0203 	and.w	r2, r3, #3
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80c0 	beq.w	8001f06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b65      	ldr	r3, [pc, #404]	; (8001f20 <HAL_GPIO_Init+0x320>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	4a64      	ldr	r2, [pc, #400]	; (8001f20 <HAL_GPIO_Init+0x320>)
 8001d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d94:	6453      	str	r3, [r2, #68]	; 0x44
 8001d96:	4b62      	ldr	r3, [pc, #392]	; (8001f20 <HAL_GPIO_Init+0x320>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001da2:	4a60      	ldr	r2, [pc, #384]	; (8001f24 <HAL_GPIO_Init+0x324>)
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	3302      	adds	r3, #2
 8001daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	220f      	movs	r2, #15
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a57      	ldr	r2, [pc, #348]	; (8001f28 <HAL_GPIO_Init+0x328>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d037      	beq.n	8001e3e <HAL_GPIO_Init+0x23e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a56      	ldr	r2, [pc, #344]	; (8001f2c <HAL_GPIO_Init+0x32c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d031      	beq.n	8001e3a <HAL_GPIO_Init+0x23a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a55      	ldr	r2, [pc, #340]	; (8001f30 <HAL_GPIO_Init+0x330>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d02b      	beq.n	8001e36 <HAL_GPIO_Init+0x236>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a54      	ldr	r2, [pc, #336]	; (8001f34 <HAL_GPIO_Init+0x334>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d025      	beq.n	8001e32 <HAL_GPIO_Init+0x232>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a53      	ldr	r2, [pc, #332]	; (8001f38 <HAL_GPIO_Init+0x338>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d01f      	beq.n	8001e2e <HAL_GPIO_Init+0x22e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a52      	ldr	r2, [pc, #328]	; (8001f3c <HAL_GPIO_Init+0x33c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d019      	beq.n	8001e2a <HAL_GPIO_Init+0x22a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a51      	ldr	r2, [pc, #324]	; (8001f40 <HAL_GPIO_Init+0x340>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_GPIO_Init+0x226>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a50      	ldr	r2, [pc, #320]	; (8001f44 <HAL_GPIO_Init+0x344>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00d      	beq.n	8001e22 <HAL_GPIO_Init+0x222>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4f      	ldr	r2, [pc, #316]	; (8001f48 <HAL_GPIO_Init+0x348>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d007      	beq.n	8001e1e <HAL_GPIO_Init+0x21e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4e      	ldr	r2, [pc, #312]	; (8001f4c <HAL_GPIO_Init+0x34c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d101      	bne.n	8001e1a <HAL_GPIO_Init+0x21a>
 8001e16:	2309      	movs	r3, #9
 8001e18:	e012      	b.n	8001e40 <HAL_GPIO_Init+0x240>
 8001e1a:	230a      	movs	r3, #10
 8001e1c:	e010      	b.n	8001e40 <HAL_GPIO_Init+0x240>
 8001e1e:	2308      	movs	r3, #8
 8001e20:	e00e      	b.n	8001e40 <HAL_GPIO_Init+0x240>
 8001e22:	2307      	movs	r3, #7
 8001e24:	e00c      	b.n	8001e40 <HAL_GPIO_Init+0x240>
 8001e26:	2306      	movs	r3, #6
 8001e28:	e00a      	b.n	8001e40 <HAL_GPIO_Init+0x240>
 8001e2a:	2305      	movs	r3, #5
 8001e2c:	e008      	b.n	8001e40 <HAL_GPIO_Init+0x240>
 8001e2e:	2304      	movs	r3, #4
 8001e30:	e006      	b.n	8001e40 <HAL_GPIO_Init+0x240>
 8001e32:	2303      	movs	r3, #3
 8001e34:	e004      	b.n	8001e40 <HAL_GPIO_Init+0x240>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e002      	b.n	8001e40 <HAL_GPIO_Init+0x240>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_GPIO_Init+0x240>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	f002 0203 	and.w	r2, r2, #3
 8001e46:	0092      	lsls	r2, r2, #2
 8001e48:	4093      	lsls	r3, r2
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e50:	4934      	ldr	r1, [pc, #208]	; (8001f24 <HAL_GPIO_Init+0x324>)
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	089b      	lsrs	r3, r3, #2
 8001e56:	3302      	adds	r3, #2
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e5e:	4b3c      	ldr	r3, [pc, #240]	; (8001f50 <HAL_GPIO_Init+0x350>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e82:	4a33      	ldr	r2, [pc, #204]	; (8001f50 <HAL_GPIO_Init+0x350>)
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e88:	4b31      	ldr	r3, [pc, #196]	; (8001f50 <HAL_GPIO_Init+0x350>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eac:	4a28      	ldr	r2, [pc, #160]	; (8001f50 <HAL_GPIO_Init+0x350>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb2:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <HAL_GPIO_Init+0x350>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed6:	4a1e      	ldr	r2, [pc, #120]	; (8001f50 <HAL_GPIO_Init+0x350>)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001edc:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <HAL_GPIO_Init+0x350>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f00:	4a13      	ldr	r2, [pc, #76]	; (8001f50 <HAL_GPIO_Init+0x350>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	2b0f      	cmp	r3, #15
 8001f10:	f67f ae84 	bls.w	8001c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f14:	bf00      	nop
 8001f16:	3724      	adds	r7, #36	; 0x24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40013800 	.word	0x40013800
 8001f28:	40020000 	.word	0x40020000
 8001f2c:	40020400 	.word	0x40020400
 8001f30:	40020800 	.word	0x40020800
 8001f34:	40020c00 	.word	0x40020c00
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40021400 	.word	0x40021400
 8001f40:	40021800 	.word	0x40021800
 8001f44:	40021c00 	.word	0x40021c00
 8001f48:	40022000 	.word	0x40022000
 8001f4c:	40022400 	.word	0x40022400
 8001f50:	40013c00 	.word	0x40013c00

08001f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f70:	e003      	b.n	8001f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	041a      	lsls	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	619a      	str	r2, [r3, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	887b      	ldrh	r3, [r7, #2]
 8001f98:	401a      	ands	r2, r3
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d104      	bne.n	8001faa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fa0:	887b      	ldrh	r3, [r7, #2]
 8001fa2:	041a      	lsls	r2, r3, #16
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001fa8:	e002      	b.n	8001fb0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001faa:	887a      	ldrh	r2, [r7, #2]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	619a      	str	r2, [r3, #24]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e25b      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d075      	beq.n	80020c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fda:	4ba3      	ldr	r3, [pc, #652]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d00c      	beq.n	8002000 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe6:	4ba0      	ldr	r3, [pc, #640]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d112      	bne.n	8002018 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ff2:	4b9d      	ldr	r3, [pc, #628]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ffe:	d10b      	bne.n	8002018 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	4b99      	ldr	r3, [pc, #612]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d05b      	beq.n	80020c4 <HAL_RCC_OscConfig+0x108>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d157      	bne.n	80020c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e236      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002020:	d106      	bne.n	8002030 <HAL_RCC_OscConfig+0x74>
 8002022:	4b91      	ldr	r3, [pc, #580]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a90      	ldr	r2, [pc, #576]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e01d      	b.n	800206c <HAL_RCC_OscConfig+0xb0>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x98>
 800203a:	4b8b      	ldr	r3, [pc, #556]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a8a      	ldr	r2, [pc, #552]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b88      	ldr	r3, [pc, #544]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a87      	ldr	r2, [pc, #540]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0xb0>
 8002054:	4b84      	ldr	r3, [pc, #528]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a83      	ldr	r2, [pc, #524]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800205a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b81      	ldr	r3, [pc, #516]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a80      	ldr	r2, [pc, #512]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7fe fe70 	bl	8000d58 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800207c:	f7fe fe6c 	bl	8000d58 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e1fb      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b76      	ldr	r3, [pc, #472]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0xc0>
 800209a:	e014      	b.n	80020c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7fe fe5c 	bl	8000d58 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a4:	f7fe fe58 	bl	8000d58 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	; 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e1e7      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b6:	4b6c      	ldr	r3, [pc, #432]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0xe8>
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d063      	beq.n	800219a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020d2:	4b65      	ldr	r3, [pc, #404]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00b      	beq.n	80020f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020de:	4b62      	ldr	r3, [pc, #392]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d11c      	bne.n	8002124 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ea:	4b5f      	ldr	r3, [pc, #380]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d116      	bne.n	8002124 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	4b5c      	ldr	r3, [pc, #368]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_RCC_OscConfig+0x152>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e1bb      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b56      	ldr	r3, [pc, #344]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4952      	ldr	r1, [pc, #328]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	e03a      	b.n	800219a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212c:	4b4f      	ldr	r3, [pc, #316]	; (800226c <HAL_RCC_OscConfig+0x2b0>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7fe fe11 	bl	8000d58 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800213a:	f7fe fe0d 	bl	8000d58 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e19c      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214c:	4b46      	ldr	r3, [pc, #280]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b43      	ldr	r3, [pc, #268]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4940      	ldr	r1, [pc, #256]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
 800216c:	e015      	b.n	800219a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216e:	4b3f      	ldr	r3, [pc, #252]	; (800226c <HAL_RCC_OscConfig+0x2b0>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7fe fdf0 	bl	8000d58 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217c:	f7fe fdec 	bl	8000d58 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e17b      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218e:	4b36      	ldr	r3, [pc, #216]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d030      	beq.n	8002208 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d016      	beq.n	80021dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ae:	4b30      	ldr	r3, [pc, #192]	; (8002270 <HAL_RCC_OscConfig+0x2b4>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7fe fdd0 	bl	8000d58 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021bc:	f7fe fdcc 	bl	8000d58 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e15b      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x200>
 80021da:	e015      	b.n	8002208 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021dc:	4b24      	ldr	r3, [pc, #144]	; (8002270 <HAL_RCC_OscConfig+0x2b4>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e2:	f7fe fdb9 	bl	8000d58 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ea:	f7fe fdb5 	bl	8000d58 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e144      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80021fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f0      	bne.n	80021ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80a0 	beq.w	8002356 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221a:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10f      	bne.n	8002246 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002242:	2301      	movs	r3, #1
 8002244:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCC_OscConfig+0x2b8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d121      	bne.n	8002296 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_RCC_OscConfig+0x2b8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a07      	ldr	r2, [pc, #28]	; (8002274 <HAL_RCC_OscConfig+0x2b8>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225e:	f7fe fd7b 	bl	8000d58 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	e011      	b.n	800228a <HAL_RCC_OscConfig+0x2ce>
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800
 800226c:	42470000 	.word	0x42470000
 8002270:	42470e80 	.word	0x42470e80
 8002274:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002278:	f7fe fd6e 	bl	8000d58 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e0fd      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228a:	4b81      	ldr	r3, [pc, #516]	; (8002490 <HAL_RCC_OscConfig+0x4d4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d106      	bne.n	80022ac <HAL_RCC_OscConfig+0x2f0>
 800229e:	4b7d      	ldr	r3, [pc, #500]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	4a7c      	ldr	r2, [pc, #496]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6713      	str	r3, [r2, #112]	; 0x70
 80022aa:	e01c      	b.n	80022e6 <HAL_RCC_OscConfig+0x32a>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b05      	cmp	r3, #5
 80022b2:	d10c      	bne.n	80022ce <HAL_RCC_OscConfig+0x312>
 80022b4:	4b77      	ldr	r3, [pc, #476]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	4a76      	ldr	r2, [pc, #472]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022ba:	f043 0304 	orr.w	r3, r3, #4
 80022be:	6713      	str	r3, [r2, #112]	; 0x70
 80022c0:	4b74      	ldr	r3, [pc, #464]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c4:	4a73      	ldr	r2, [pc, #460]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6713      	str	r3, [r2, #112]	; 0x70
 80022cc:	e00b      	b.n	80022e6 <HAL_RCC_OscConfig+0x32a>
 80022ce:	4b71      	ldr	r3, [pc, #452]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d2:	4a70      	ldr	r2, [pc, #448]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	6713      	str	r3, [r2, #112]	; 0x70
 80022da:	4b6e      	ldr	r3, [pc, #440]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022de:	4a6d      	ldr	r2, [pc, #436]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022e0:	f023 0304 	bic.w	r3, r3, #4
 80022e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d015      	beq.n	800231a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ee:	f7fe fd33 	bl	8000d58 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f4:	e00a      	b.n	800230c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f6:	f7fe fd2f 	bl	8000d58 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e0bc      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	4b61      	ldr	r3, [pc, #388]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ee      	beq.n	80022f6 <HAL_RCC_OscConfig+0x33a>
 8002318:	e014      	b.n	8002344 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231a:	f7fe fd1d 	bl	8000d58 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7fe fd19 	bl	8000d58 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e0a6      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002338:	4b56      	ldr	r3, [pc, #344]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1ee      	bne.n	8002322 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002344:	7dfb      	ldrb	r3, [r7, #23]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d105      	bne.n	8002356 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234a:	4b52      	ldr	r3, [pc, #328]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	4a51      	ldr	r2, [pc, #324]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 8002350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002354:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8092 	beq.w	8002484 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002360:	4b4c      	ldr	r3, [pc, #304]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 030c 	and.w	r3, r3, #12
 8002368:	2b08      	cmp	r3, #8
 800236a:	d05c      	beq.n	8002426 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d141      	bne.n	80023f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002374:	4b48      	ldr	r3, [pc, #288]	; (8002498 <HAL_RCC_OscConfig+0x4dc>)
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7fe fced 	bl	8000d58 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002382:	f7fe fce9 	bl	8000d58 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e078      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002394:	4b3f      	ldr	r3, [pc, #252]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f0      	bne.n	8002382 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	019b      	lsls	r3, r3, #6
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	3b01      	subs	r3, #1
 80023ba:	041b      	lsls	r3, r3, #16
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	061b      	lsls	r3, r3, #24
 80023c4:	4933      	ldr	r1, [pc, #204]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ca:	4b33      	ldr	r3, [pc, #204]	; (8002498 <HAL_RCC_OscConfig+0x4dc>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe fcc2 	bl	8000d58 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d8:	f7fe fcbe 	bl	8000d58 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e04d      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ea:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x41c>
 80023f6:	e045      	b.n	8002484 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f8:	4b27      	ldr	r3, [pc, #156]	; (8002498 <HAL_RCC_OscConfig+0x4dc>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7fe fcab 	bl	8000d58 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002406:	f7fe fca7 	bl	8000d58 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e036      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002418:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f0      	bne.n	8002406 <HAL_RCC_OscConfig+0x44a>
 8002424:	e02e      	b.n	8002484 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e029      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002432:	4b18      	ldr	r3, [pc, #96]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	429a      	cmp	r2, r3
 8002444:	d11c      	bne.n	8002480 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d115      	bne.n	8002480 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800245a:	4013      	ands	r3, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002460:	4293      	cmp	r3, r2
 8002462:	d10d      	bne.n	8002480 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800246e:	429a      	cmp	r2, r3
 8002470:	d106      	bne.n	8002480 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40007000 	.word	0x40007000
 8002494:	40023800 	.word	0x40023800
 8002498:	42470060 	.word	0x42470060

0800249c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0cc      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024b0:	4b68      	ldr	r3, [pc, #416]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d90c      	bls.n	80024d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b65      	ldr	r3, [pc, #404]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b63      	ldr	r3, [pc, #396]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0b8      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d020      	beq.n	8002526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f0:	4b59      	ldr	r3, [pc, #356]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4a58      	ldr	r2, [pc, #352]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002508:	4b53      	ldr	r3, [pc, #332]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a52      	ldr	r2, [pc, #328]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002514:	4b50      	ldr	r3, [pc, #320]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	494d      	ldr	r1, [pc, #308]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d044      	beq.n	80025bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d119      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e07f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d003      	beq.n	800255a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002556:	2b03      	cmp	r3, #3
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255a:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e06f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256a:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e067      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800257a:	4b37      	ldr	r3, [pc, #220]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f023 0203 	bic.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4934      	ldr	r1, [pc, #208]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	4313      	orrs	r3, r2
 800258a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800258c:	f7fe fbe4 	bl	8000d58 <HAL_GetTick>
 8002590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	e00a      	b.n	80025aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f7fe fbe0 	bl	8000d58 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e04f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 020c 	and.w	r2, r3, #12
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d1eb      	bne.n	8002594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025bc:	4b25      	ldr	r3, [pc, #148]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d20c      	bcs.n	80025e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b22      	ldr	r3, [pc, #136]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e032      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4916      	ldr	r1, [pc, #88]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	490e      	ldr	r1, [pc, #56]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002622:	f000 f821 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 8002626:	4601      	mov	r1, r0
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	4a0a      	ldr	r2, [pc, #40]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	5cd3      	ldrb	r3, [r2, r3]
 8002636:	fa21 f303 	lsr.w	r3, r1, r3
 800263a:	4a09      	ldr	r2, [pc, #36]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_RCC_ClockConfig+0x1c8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fa8c 	bl	8000b60 <HAL_InitTick>

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40023c00 	.word	0x40023c00
 8002658:	40023800 	.word	0x40023800
 800265c:	08005a14 	.word	0x08005a14
 8002660:	20000000 	.word	0x20000000
 8002664:	20000004 	.word	0x20000004

08002668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	2300      	movs	r3, #0
 8002678:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800267e:	4b63      	ldr	r3, [pc, #396]	; (800280c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b04      	cmp	r3, #4
 8002688:	d007      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0x32>
 800268a:	2b08      	cmp	r3, #8
 800268c:	d008      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x38>
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 80b4 	bne.w	80027fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002694:	4b5e      	ldr	r3, [pc, #376]	; (8002810 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002696:	60bb      	str	r3, [r7, #8]
       break;
 8002698:	e0b3      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800269a:	4b5e      	ldr	r3, [pc, #376]	; (8002814 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800269c:	60bb      	str	r3, [r7, #8]
      break;
 800269e:	e0b0      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026a0:	4b5a      	ldr	r3, [pc, #360]	; (800280c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026aa:	4b58      	ldr	r3, [pc, #352]	; (800280c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d04a      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b6:	4b55      	ldr	r3, [pc, #340]	; (800280c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	099b      	lsrs	r3, r3, #6
 80026bc:	f04f 0400 	mov.w	r4, #0
 80026c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	ea03 0501 	and.w	r5, r3, r1
 80026cc:	ea04 0602 	and.w	r6, r4, r2
 80026d0:	4629      	mov	r1, r5
 80026d2:	4632      	mov	r2, r6
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	f04f 0400 	mov.w	r4, #0
 80026dc:	0154      	lsls	r4, r2, #5
 80026de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026e2:	014b      	lsls	r3, r1, #5
 80026e4:	4619      	mov	r1, r3
 80026e6:	4622      	mov	r2, r4
 80026e8:	1b49      	subs	r1, r1, r5
 80026ea:	eb62 0206 	sbc.w	r2, r2, r6
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	f04f 0400 	mov.w	r4, #0
 80026f6:	0194      	lsls	r4, r2, #6
 80026f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026fc:	018b      	lsls	r3, r1, #6
 80026fe:	1a5b      	subs	r3, r3, r1
 8002700:	eb64 0402 	sbc.w	r4, r4, r2
 8002704:	f04f 0100 	mov.w	r1, #0
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	00e2      	lsls	r2, r4, #3
 800270e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002712:	00d9      	lsls	r1, r3, #3
 8002714:	460b      	mov	r3, r1
 8002716:	4614      	mov	r4, r2
 8002718:	195b      	adds	r3, r3, r5
 800271a:	eb44 0406 	adc.w	r4, r4, r6
 800271e:	f04f 0100 	mov.w	r1, #0
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	0262      	lsls	r2, r4, #9
 8002728:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800272c:	0259      	lsls	r1, r3, #9
 800272e:	460b      	mov	r3, r1
 8002730:	4614      	mov	r4, r2
 8002732:	4618      	mov	r0, r3
 8002734:	4621      	mov	r1, r4
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f04f 0400 	mov.w	r4, #0
 800273c:	461a      	mov	r2, r3
 800273e:	4623      	mov	r3, r4
 8002740:	f7fd fd56 	bl	80001f0 <__aeabi_uldivmod>
 8002744:	4603      	mov	r3, r0
 8002746:	460c      	mov	r4, r1
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	e049      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274c:	4b2f      	ldr	r3, [pc, #188]	; (800280c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	099b      	lsrs	r3, r3, #6
 8002752:	f04f 0400 	mov.w	r4, #0
 8002756:	f240 11ff 	movw	r1, #511	; 0x1ff
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	ea03 0501 	and.w	r5, r3, r1
 8002762:	ea04 0602 	and.w	r6, r4, r2
 8002766:	4629      	mov	r1, r5
 8002768:	4632      	mov	r2, r6
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	f04f 0400 	mov.w	r4, #0
 8002772:	0154      	lsls	r4, r2, #5
 8002774:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002778:	014b      	lsls	r3, r1, #5
 800277a:	4619      	mov	r1, r3
 800277c:	4622      	mov	r2, r4
 800277e:	1b49      	subs	r1, r1, r5
 8002780:	eb62 0206 	sbc.w	r2, r2, r6
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	f04f 0400 	mov.w	r4, #0
 800278c:	0194      	lsls	r4, r2, #6
 800278e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002792:	018b      	lsls	r3, r1, #6
 8002794:	1a5b      	subs	r3, r3, r1
 8002796:	eb64 0402 	sbc.w	r4, r4, r2
 800279a:	f04f 0100 	mov.w	r1, #0
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	00e2      	lsls	r2, r4, #3
 80027a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027a8:	00d9      	lsls	r1, r3, #3
 80027aa:	460b      	mov	r3, r1
 80027ac:	4614      	mov	r4, r2
 80027ae:	195b      	adds	r3, r3, r5
 80027b0:	eb44 0406 	adc.w	r4, r4, r6
 80027b4:	f04f 0100 	mov.w	r1, #0
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	02a2      	lsls	r2, r4, #10
 80027be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027c2:	0299      	lsls	r1, r3, #10
 80027c4:	460b      	mov	r3, r1
 80027c6:	4614      	mov	r4, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	4621      	mov	r1, r4
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f04f 0400 	mov.w	r4, #0
 80027d2:	461a      	mov	r2, r3
 80027d4:	4623      	mov	r3, r4
 80027d6:	f7fd fd0b 	bl	80001f0 <__aeabi_uldivmod>
 80027da:	4603      	mov	r3, r0
 80027dc:	460c      	mov	r4, r1
 80027de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	3301      	adds	r3, #1
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	60bb      	str	r3, [r7, #8]
      break;
 80027fa:	e002      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027fe:	60bb      	str	r3, [r7, #8]
      break;
 8002800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002802:	68bb      	ldr	r3, [r7, #8]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800280c:	40023800 	.word	0x40023800
 8002810:	00f42400 	.word	0x00f42400
 8002814:	007a1200 	.word	0x007a1200

08002818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <HAL_RCC_GetHCLKFreq+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000000 	.word	0x20000000

08002830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002834:	f7ff fff0 	bl	8002818 <HAL_RCC_GetHCLKFreq>
 8002838:	4601      	mov	r1, r0
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	0b5b      	lsrs	r3, r3, #13
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	4a03      	ldr	r2, [pc, #12]	; (8002854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40023800 	.word	0x40023800
 8002854:	08005a24 	.word	0x08005a24

08002858 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	220f      	movs	r2, #15
 8002866:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002868:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_RCC_GetClockConfig+0x5c>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 0203 	and.w	r2, r3, #3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002874:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <HAL_RCC_GetClockConfig+0x5c>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	08db      	lsrs	r3, r3, #3
 8002892:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <HAL_RCC_GetClockConfig+0x60>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 020f 	and.w	r2, r3, #15
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	601a      	str	r2, [r3, #0]
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40023c00 	.word	0x40023c00

080028bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e01d      	b.n	800290a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f815 	bl	8002912 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3304      	adds	r3, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f000 f968 	bl	8002bd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b06      	cmp	r3, #6
 800294e:	d007      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b02      	cmp	r3, #2
 8002982:	d122      	bne.n	80029ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b02      	cmp	r3, #2
 8002990:	d11b      	bne.n	80029ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f06f 0202 	mvn.w	r2, #2
 800299a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f8ee 	bl	8002b92 <HAL_TIM_IC_CaptureCallback>
 80029b6:	e005      	b.n	80029c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f8e0 	bl	8002b7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f8f1 	bl	8002ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d122      	bne.n	8002a1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d11b      	bne.n	8002a1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f06f 0204 	mvn.w	r2, #4
 80029ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f8c4 	bl	8002b92 <HAL_TIM_IC_CaptureCallback>
 8002a0a:	e005      	b.n	8002a18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f8b6 	bl	8002b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f8c7 	bl	8002ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d122      	bne.n	8002a72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d11b      	bne.n	8002a72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f06f 0208 	mvn.w	r2, #8
 8002a42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2204      	movs	r2, #4
 8002a48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f89a 	bl	8002b92 <HAL_TIM_IC_CaptureCallback>
 8002a5e:	e005      	b.n	8002a6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f88c 	bl	8002b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f89d 	bl	8002ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d122      	bne.n	8002ac6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b10      	cmp	r3, #16
 8002a8c:	d11b      	bne.n	8002ac6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f06f 0210 	mvn.w	r2, #16
 8002a96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2208      	movs	r2, #8
 8002a9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f870 	bl	8002b92 <HAL_TIM_IC_CaptureCallback>
 8002ab2:	e005      	b.n	8002ac0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f862 	bl	8002b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f873 	bl	8002ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d10e      	bne.n	8002af2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f06f 0201 	mvn.w	r2, #1
 8002aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7fd fff5 	bl	8000adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afc:	2b80      	cmp	r3, #128	; 0x80
 8002afe:	d10e      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0a:	2b80      	cmp	r3, #128	; 0x80
 8002b0c:	d107      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f903 	bl	8002d24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	d10e      	bne.n	8002b4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	2b40      	cmp	r3, #64	; 0x40
 8002b38:	d107      	bne.n	8002b4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f838 	bl	8002bba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d10e      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	d107      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f06f 0220 	mvn.w	r2, #32
 8002b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f8cd 	bl	8002d10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a40      	ldr	r2, [pc, #256]	; (8002ce4 <TIM_Base_SetConfig+0x114>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d013      	beq.n	8002c10 <TIM_Base_SetConfig+0x40>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bee:	d00f      	beq.n	8002c10 <TIM_Base_SetConfig+0x40>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a3d      	ldr	r2, [pc, #244]	; (8002ce8 <TIM_Base_SetConfig+0x118>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00b      	beq.n	8002c10 <TIM_Base_SetConfig+0x40>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a3c      	ldr	r2, [pc, #240]	; (8002cec <TIM_Base_SetConfig+0x11c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d007      	beq.n	8002c10 <TIM_Base_SetConfig+0x40>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3b      	ldr	r2, [pc, #236]	; (8002cf0 <TIM_Base_SetConfig+0x120>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d003      	beq.n	8002c10 <TIM_Base_SetConfig+0x40>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a3a      	ldr	r2, [pc, #232]	; (8002cf4 <TIM_Base_SetConfig+0x124>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d108      	bne.n	8002c22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a2f      	ldr	r2, [pc, #188]	; (8002ce4 <TIM_Base_SetConfig+0x114>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d02b      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c30:	d027      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a2c      	ldr	r2, [pc, #176]	; (8002ce8 <TIM_Base_SetConfig+0x118>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d023      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a2b      	ldr	r2, [pc, #172]	; (8002cec <TIM_Base_SetConfig+0x11c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d01f      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a2a      	ldr	r2, [pc, #168]	; (8002cf0 <TIM_Base_SetConfig+0x120>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01b      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a29      	ldr	r2, [pc, #164]	; (8002cf4 <TIM_Base_SetConfig+0x124>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d017      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a28      	ldr	r2, [pc, #160]	; (8002cf8 <TIM_Base_SetConfig+0x128>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a27      	ldr	r2, [pc, #156]	; (8002cfc <TIM_Base_SetConfig+0x12c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00f      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a26      	ldr	r2, [pc, #152]	; (8002d00 <TIM_Base_SetConfig+0x130>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00b      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a25      	ldr	r2, [pc, #148]	; (8002d04 <TIM_Base_SetConfig+0x134>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d007      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a24      	ldr	r2, [pc, #144]	; (8002d08 <TIM_Base_SetConfig+0x138>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d003      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a23      	ldr	r2, [pc, #140]	; (8002d0c <TIM_Base_SetConfig+0x13c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d108      	bne.n	8002c94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <TIM_Base_SetConfig+0x114>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d003      	beq.n	8002cc8 <TIM_Base_SetConfig+0xf8>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a0c      	ldr	r2, [pc, #48]	; (8002cf4 <TIM_Base_SetConfig+0x124>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d103      	bne.n	8002cd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	615a      	str	r2, [r3, #20]
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40010000 	.word	0x40010000
 8002ce8:	40000400 	.word	0x40000400
 8002cec:	40000800 	.word	0x40000800
 8002cf0:	40000c00 	.word	0x40000c00
 8002cf4:	40010400 	.word	0x40010400
 8002cf8:	40014000 	.word	0x40014000
 8002cfc:	40014400 	.word	0x40014400
 8002d00:	40014800 	.word	0x40014800
 8002d04:	40001800 	.word	0x40001800
 8002d08:	40001c00 	.word	0x40001c00
 8002d0c:	40002000 	.word	0x40002000

08002d10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d4e:	f3ef 8305 	mrs	r3, IPSR
 8002d52:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10f      	bne.n	8002d7a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d5e:	607b      	str	r3, [r7, #4]
  return(result);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d105      	bne.n	8002d72 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d66:	f3ef 8311 	mrs	r3, BASEPRI
 8002d6a:	603b      	str	r3, [r7, #0]
  return(result);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <osKernelInitialize+0x3a>
 8002d72:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <osKernelInitialize+0x64>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d103      	bne.n	8002d82 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002d7a:	f06f 0305 	mvn.w	r3, #5
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	e00c      	b.n	8002d9c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <osKernelInitialize+0x64>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d105      	bne.n	8002d96 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <osKernelInitialize+0x64>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	e002      	b.n	8002d9c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002d96:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000098 	.word	0x20000098

08002db0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002db6:	f3ef 8305 	mrs	r3, IPSR
 8002dba:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10f      	bne.n	8002de2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc6:	607b      	str	r3, [r7, #4]
  return(result);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d105      	bne.n	8002dda <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002dce:	f3ef 8311 	mrs	r3, BASEPRI
 8002dd2:	603b      	str	r3, [r7, #0]
  return(result);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <osKernelStart+0x3a>
 8002dda:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <osKernelStart+0x68>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d103      	bne.n	8002dea <osKernelStart+0x3a>
    stat = osErrorISR;
 8002de2:	f06f 0305 	mvn.w	r3, #5
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e010      	b.n	8002e0c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <osKernelStart+0x68>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d109      	bne.n	8002e06 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002df2:	f7ff ffa1 	bl	8002d38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <osKernelStart+0x68>)
 8002df8:	2202      	movs	r2, #2
 8002dfa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002dfc:	f001 f8ea 	bl	8003fd4 <vTaskStartScheduler>
      stat = osOK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	e002      	b.n	8002e0c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002e06:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000098 	.word	0x20000098

08002e1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b090      	sub	sp, #64	; 0x40
 8002e20:	af04      	add	r7, sp, #16
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e2c:	f3ef 8305 	mrs	r3, IPSR
 8002e30:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e32:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f040 808f 	bne.w	8002f58 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e3e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d105      	bne.n	8002e52 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e46:	f3ef 8311 	mrs	r3, BASEPRI
 8002e4a:	617b      	str	r3, [r7, #20]
  return(result);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <osThreadNew+0x3e>
 8002e52:	4b44      	ldr	r3, [pc, #272]	; (8002f64 <osThreadNew+0x148>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d07e      	beq.n	8002f58 <osThreadNew+0x13c>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d07b      	beq.n	8002f58 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002e64:	2318      	movs	r3, #24
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e70:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d045      	beq.n	8002f04 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <osThreadNew+0x6a>
        name = attr->name;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d008      	beq.n	8002eac <osThreadNew+0x90>
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	2b38      	cmp	r3, #56	; 0x38
 8002e9e:	d805      	bhi.n	8002eac <osThreadNew+0x90>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <osThreadNew+0x94>
        return (NULL);
 8002eac:	2300      	movs	r3, #0
 8002eae:	e054      	b.n	8002f5a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	089b      	lsrs	r3, r3, #2
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00e      	beq.n	8002ee6 <osThreadNew+0xca>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b5b      	cmp	r3, #91	; 0x5b
 8002ece:	d90a      	bls.n	8002ee6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d006      	beq.n	8002ee6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <osThreadNew+0xca>
        mem = 1;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	623b      	str	r3, [r7, #32]
 8002ee4:	e010      	b.n	8002f08 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10c      	bne.n	8002f08 <osThreadNew+0xec>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d108      	bne.n	8002f08 <osThreadNew+0xec>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d104      	bne.n	8002f08 <osThreadNew+0xec>
          mem = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	623b      	str	r3, [r7, #32]
 8002f02:	e001      	b.n	8002f08 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d110      	bne.n	8002f30 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f16:	9202      	str	r2, [sp, #8]
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 fe09 	bl	8003b3c <xTaskCreateStatic>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	e013      	b.n	8002f58 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d110      	bne.n	8002f58 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	f107 0310 	add.w	r3, r7, #16
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 fe51 	bl	8003bf0 <xTaskCreate>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d001      	beq.n	8002f58 <osThreadNew+0x13c>
          hTask = NULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f58:	693b      	ldr	r3, [r7, #16]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3730      	adds	r7, #48	; 0x30
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000098 	.word	0x20000098

08002f68 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f70:	f3ef 8305 	mrs	r3, IPSR
 8002f74:	613b      	str	r3, [r7, #16]
  return(result);
 8002f76:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10f      	bne.n	8002f9c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f80:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d105      	bne.n	8002f94 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f88:	f3ef 8311 	mrs	r3, BASEPRI
 8002f8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d007      	beq.n	8002fa4 <osDelay+0x3c>
 8002f94:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <osDelay+0x58>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d103      	bne.n	8002fa4 <osDelay+0x3c>
    stat = osErrorISR;
 8002f9c:	f06f 0305 	mvn.w	r3, #5
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	e007      	b.n	8002fb4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 ffdc 	bl	8003f6c <vTaskDelay>
    }
  }

  return (stat);
 8002fb4:	697b      	ldr	r3, [r7, #20]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000098 	.word	0x20000098

08002fc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4a07      	ldr	r2, [pc, #28]	; (8002ff0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002fd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4a06      	ldr	r2, [pc, #24]	; (8002ff4 <vApplicationGetIdleTaskMemory+0x30>)
 8002fda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2280      	movs	r2, #128	; 0x80
 8002fe0:	601a      	str	r2, [r3, #0]
}
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	2000009c 	.word	0x2000009c
 8002ff4:	200000f8 	.word	0x200000f8

08002ff8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4a07      	ldr	r2, [pc, #28]	; (8003024 <vApplicationGetTimerTaskMemory+0x2c>)
 8003008:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4a06      	ldr	r2, [pc, #24]	; (8003028 <vApplicationGetTimerTaskMemory+0x30>)
 800300e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003016:	601a      	str	r2, [r3, #0]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	200002f8 	.word	0x200002f8
 8003028:	20000354 	.word	0x20000354

0800302c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f103 0208 	add.w	r2, r3, #8
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f04f 32ff 	mov.w	r2, #4294967295
 8003044:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f103 0208 	add.w	r2, r3, #8
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f103 0208 	add.w	r2, r3, #8
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003086:	b480      	push	{r7}
 8003088:	b085      	sub	sp, #20
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	601a      	str	r2, [r3, #0]
}
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d103      	bne.n	80030ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	e00c      	b.n	8003108 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3308      	adds	r3, #8
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	e002      	b.n	80030fc <vListInsert+0x2e>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	429a      	cmp	r2, r3
 8003106:	d2f6      	bcs.n	80030f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	601a      	str	r2, [r3, #0]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6892      	ldr	r2, [r2, #8]
 8003156:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6852      	ldr	r2, [r2, #4]
 8003160:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	429a      	cmp	r2, r3
 800316a:	d103      	bne.n	8003174 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	1e5a      	subs	r2, r3, #1
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d109      	bne.n	80031bc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	e7fe      	b.n	80031ba <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80031bc:	f002 f88e 	bl	80052dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c8:	68f9      	ldr	r1, [r7, #12]
 80031ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	441a      	add	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ec:	3b01      	subs	r3, #1
 80031ee:	68f9      	ldr	r1, [r7, #12]
 80031f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	441a      	add	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	22ff      	movs	r2, #255	; 0xff
 8003200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	22ff      	movs	r2, #255	; 0xff
 8003208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d114      	bne.n	800323c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01a      	beq.n	8003250 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	3310      	adds	r3, #16
 800321e:	4618      	mov	r0, r3
 8003220:	f001 f958 	bl	80044d4 <xTaskRemoveFromEventList>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d012      	beq.n	8003250 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800322a:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <xQueueGenericReset+0xcc>)
 800322c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	f3bf 8f6f 	isb	sy
 800323a:	e009      	b.n	8003250 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	3310      	adds	r3, #16
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fef3 	bl	800302c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	3324      	adds	r3, #36	; 0x24
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff feee 	bl	800302c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003250:	f002 f872 	bl	8005338 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003254:	2301      	movs	r3, #1
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	e000ed04 	.word	0xe000ed04

08003264 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08e      	sub	sp, #56	; 0x38
 8003268:	af02      	add	r7, sp, #8
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d109      	bne.n	800328c <xQueueGenericCreateStatic+0x28>
 8003278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
 800328a:	e7fe      	b.n	800328a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <xQueueGenericCreateStatic+0x42>
 8003292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
 80032a4:	e7fe      	b.n	80032a4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <xQueueGenericCreateStatic+0x4e>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <xQueueGenericCreateStatic+0x52>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <xQueueGenericCreateStatic+0x54>
 80032b6:	2300      	movs	r3, #0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <xQueueGenericCreateStatic+0x6c>
 80032bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c0:	f383 8811 	msr	BASEPRI, r3
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	623b      	str	r3, [r7, #32]
 80032ce:	e7fe      	b.n	80032ce <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d102      	bne.n	80032dc <xQueueGenericCreateStatic+0x78>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <xQueueGenericCreateStatic+0x7c>
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <xQueueGenericCreateStatic+0x7e>
 80032e0:	2300      	movs	r3, #0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <xQueueGenericCreateStatic+0x96>
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	61fb      	str	r3, [r7, #28]
 80032f8:	e7fe      	b.n	80032f8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80032fa:	2350      	movs	r3, #80	; 0x50
 80032fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b50      	cmp	r3, #80	; 0x50
 8003302:	d009      	beq.n	8003318 <xQueueGenericCreateStatic+0xb4>
 8003304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003308:	f383 8811 	msr	BASEPRI, r3
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	e7fe      	b.n	8003316 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003318:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00d      	beq.n	8003340 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800332c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	4613      	mov	r3, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f805 	bl	800334a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003342:	4618      	mov	r0, r3
 8003344:	3730      	adds	r7, #48	; 0x30
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	e002      	b.n	800336c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003378:	2101      	movs	r1, #1
 800337a:	69b8      	ldr	r0, [r7, #24]
 800337c:	f7ff ff0a 	bl	8003194 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08e      	sub	sp, #56	; 0x38
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800339e:	2300      	movs	r3, #0
 80033a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d109      	bne.n	80033c0 <xQueueGenericSend+0x30>
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80033be:	e7fe      	b.n	80033be <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <xQueueGenericSend+0x3e>
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <xQueueGenericSend+0x42>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <xQueueGenericSend+0x44>
 80033d2:	2300      	movs	r3, #0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d109      	bne.n	80033ec <xQueueGenericSend+0x5c>
 80033d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ea:	e7fe      	b.n	80033ea <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d103      	bne.n	80033fa <xQueueGenericSend+0x6a>
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <xQueueGenericSend+0x6e>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <xQueueGenericSend+0x70>
 80033fe:	2300      	movs	r3, #0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d109      	bne.n	8003418 <xQueueGenericSend+0x88>
 8003404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	623b      	str	r3, [r7, #32]
 8003416:	e7fe      	b.n	8003416 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003418:	f001 fa14 	bl	8004844 <xTaskGetSchedulerState>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d102      	bne.n	8003428 <xQueueGenericSend+0x98>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <xQueueGenericSend+0x9c>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <xQueueGenericSend+0x9e>
 800342c:	2300      	movs	r3, #0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d109      	bne.n	8003446 <xQueueGenericSend+0xb6>
 8003432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	e7fe      	b.n	8003444 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003446:	f001 ff49 	bl	80052dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003452:	429a      	cmp	r2, r3
 8003454:	d302      	bcc.n	800345c <xQueueGenericSend+0xcc>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d129      	bne.n	80034b0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003462:	f000 f9ff 	bl	8003864 <prvCopyDataToQueue>
 8003466:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	2b00      	cmp	r3, #0
 800346e:	d010      	beq.n	8003492 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003472:	3324      	adds	r3, #36	; 0x24
 8003474:	4618      	mov	r0, r3
 8003476:	f001 f82d 	bl	80044d4 <xTaskRemoveFromEventList>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d013      	beq.n	80034a8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003480:	4b3f      	ldr	r3, [pc, #252]	; (8003580 <xQueueGenericSend+0x1f0>)
 8003482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	e00a      	b.n	80034a8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d007      	beq.n	80034a8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003498:	4b39      	ldr	r3, [pc, #228]	; (8003580 <xQueueGenericSend+0x1f0>)
 800349a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034a8:	f001 ff46 	bl	8005338 <vPortExitCritical>
				return pdPASS;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e063      	b.n	8003578 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d103      	bne.n	80034be <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034b6:	f001 ff3f 	bl	8005338 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e05c      	b.n	8003578 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034c4:	f107 0314 	add.w	r3, r7, #20
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 f865 	bl	8004598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034ce:	2301      	movs	r3, #1
 80034d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034d2:	f001 ff31 	bl	8005338 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034d6:	f000 fde1 	bl	800409c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034da:	f001 feff 	bl	80052dc <vPortEnterCritical>
 80034de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034e4:	b25b      	sxtb	r3, r3
 80034e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ea:	d103      	bne.n	80034f4 <xQueueGenericSend+0x164>
 80034ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034fa:	b25b      	sxtb	r3, r3
 80034fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003500:	d103      	bne.n	800350a <xQueueGenericSend+0x17a>
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800350a:	f001 ff15 	bl	8005338 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800350e:	1d3a      	adds	r2, r7, #4
 8003510:	f107 0314 	add.w	r3, r7, #20
 8003514:	4611      	mov	r1, r2
 8003516:	4618      	mov	r0, r3
 8003518:	f001 f854 	bl	80045c4 <xTaskCheckForTimeOut>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d124      	bne.n	800356c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003524:	f000 fa96 	bl	8003a54 <prvIsQueueFull>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d018      	beq.n	8003560 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	3310      	adds	r3, #16
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f000 ff7e 	bl	8004438 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800353c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800353e:	f000 fa21 	bl	8003984 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003542:	f000 fdb9 	bl	80040b8 <xTaskResumeAll>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	f47f af7c 	bne.w	8003446 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800354e:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <xQueueGenericSend+0x1f0>)
 8003550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	e772      	b.n	8003446 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003562:	f000 fa0f 	bl	8003984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003566:	f000 fda7 	bl	80040b8 <xTaskResumeAll>
 800356a:	e76c      	b.n	8003446 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800356c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800356e:	f000 fa09 	bl	8003984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003572:	f000 fda1 	bl	80040b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003576:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003578:	4618      	mov	r0, r3
 800357a:	3738      	adds	r7, #56	; 0x38
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	e000ed04 	.word	0xe000ed04

08003584 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08e      	sub	sp, #56	; 0x38
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	2b00      	cmp	r3, #0
 800359a:	d109      	bne.n	80035b0 <xQueueGenericSendFromISR+0x2c>
 800359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
 80035ae:	e7fe      	b.n	80035ae <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d103      	bne.n	80035be <xQueueGenericSendFromISR+0x3a>
 80035b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <xQueueGenericSendFromISR+0x3e>
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <xQueueGenericSendFromISR+0x40>
 80035c2:	2300      	movs	r3, #0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d109      	bne.n	80035dc <xQueueGenericSendFromISR+0x58>
 80035c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	623b      	str	r3, [r7, #32]
 80035da:	e7fe      	b.n	80035da <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d103      	bne.n	80035ea <xQueueGenericSendFromISR+0x66>
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <xQueueGenericSendFromISR+0x6a>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <xQueueGenericSendFromISR+0x6c>
 80035ee:	2300      	movs	r3, #0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d109      	bne.n	8003608 <xQueueGenericSendFromISR+0x84>
 80035f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	e7fe      	b.n	8003606 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003608:	f001 ff44 	bl	8005494 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800360c:	f3ef 8211 	mrs	r2, BASEPRI
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	61ba      	str	r2, [r7, #24]
 8003622:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003624:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003630:	429a      	cmp	r2, r3
 8003632:	d302      	bcc.n	800363a <xQueueGenericSendFromISR+0xb6>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d12c      	bne.n	8003694 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	68b9      	ldr	r1, [r7, #8]
 8003648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800364a:	f000 f90b 	bl	8003864 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800364e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003656:	d112      	bne.n	800367e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	2b00      	cmp	r3, #0
 800365e:	d016      	beq.n	800368e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003662:	3324      	adds	r3, #36	; 0x24
 8003664:	4618      	mov	r0, r3
 8003666:	f000 ff35 	bl	80044d4 <xTaskRemoveFromEventList>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00e      	beq.n	800368e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	e007      	b.n	800368e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800367e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003682:	3301      	adds	r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	b25a      	sxtb	r2, r3
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800368e:	2301      	movs	r3, #1
 8003690:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003692:	e001      	b.n	8003698 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003694:	2300      	movs	r3, #0
 8003696:	637b      	str	r3, [r7, #52]	; 0x34
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3738      	adds	r7, #56	; 0x38
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08c      	sub	sp, #48	; 0x30
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80036b8:	2300      	movs	r3, #0
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <xQueueReceive+0x2e>
	__asm volatile
 80036c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ca:	f383 8811 	msr	BASEPRI, r3
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f3bf 8f4f 	dsb	sy
 80036d6:	623b      	str	r3, [r7, #32]
 80036d8:	e7fe      	b.n	80036d8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d103      	bne.n	80036e8 <xQueueReceive+0x3c>
 80036e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <xQueueReceive+0x40>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <xQueueReceive+0x42>
 80036ec:	2300      	movs	r3, #0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <xQueueReceive+0x5a>
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	e7fe      	b.n	8003704 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003706:	f001 f89d 	bl	8004844 <xTaskGetSchedulerState>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <xQueueReceive+0x6a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <xQueueReceive+0x6e>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <xQueueReceive+0x70>
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d109      	bne.n	8003734 <xQueueReceive+0x88>
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	e7fe      	b.n	8003732 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003734:	f001 fdd2 	bl	80052dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01f      	beq.n	8003784 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003748:	f000 f8f6 	bl	8003938 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	1e5a      	subs	r2, r3, #1
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003752:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00f      	beq.n	800377c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375e:	3310      	adds	r3, #16
 8003760:	4618      	mov	r0, r3
 8003762:	f000 feb7 	bl	80044d4 <xTaskRemoveFromEventList>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d007      	beq.n	800377c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800376c:	4b3c      	ldr	r3, [pc, #240]	; (8003860 <xQueueReceive+0x1b4>)
 800376e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800377c:	f001 fddc 	bl	8005338 <vPortExitCritical>
				return pdPASS;
 8003780:	2301      	movs	r3, #1
 8003782:	e069      	b.n	8003858 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d103      	bne.n	8003792 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800378a:	f001 fdd5 	bl	8005338 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800378e:	2300      	movs	r3, #0
 8003790:	e062      	b.n	8003858 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003794:	2b00      	cmp	r3, #0
 8003796:	d106      	bne.n	80037a6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003798:	f107 0310 	add.w	r3, r7, #16
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fefb 	bl	8004598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037a2:	2301      	movs	r3, #1
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037a6:	f001 fdc7 	bl	8005338 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037aa:	f000 fc77 	bl	800409c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037ae:	f001 fd95 	bl	80052dc <vPortEnterCritical>
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037b8:	b25b      	sxtb	r3, r3
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d103      	bne.n	80037c8 <xQueueReceive+0x11c>
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ce:	b25b      	sxtb	r3, r3
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d103      	bne.n	80037de <xQueueReceive+0x132>
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037de:	f001 fdab 	bl	8005338 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037e2:	1d3a      	adds	r2, r7, #4
 80037e4:	f107 0310 	add.w	r3, r7, #16
 80037e8:	4611      	mov	r1, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 feea 	bl	80045c4 <xTaskCheckForTimeOut>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d123      	bne.n	800383e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037f8:	f000 f916 	bl	8003a28 <prvIsQueueEmpty>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d017      	beq.n	8003832 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	3324      	adds	r3, #36	; 0x24
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f000 fe14 	bl	8004438 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003812:	f000 f8b7 	bl	8003984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003816:	f000 fc4f 	bl	80040b8 <xTaskResumeAll>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d189      	bne.n	8003734 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <xQueueReceive+0x1b4>)
 8003822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	e780      	b.n	8003734 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003834:	f000 f8a6 	bl	8003984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003838:	f000 fc3e 	bl	80040b8 <xTaskResumeAll>
 800383c:	e77a      	b.n	8003734 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800383e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003840:	f000 f8a0 	bl	8003984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003844:	f000 fc38 	bl	80040b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800384a:	f000 f8ed 	bl	8003a28 <prvIsQueueEmpty>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	f43f af6f 	beq.w	8003734 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003856:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003858:	4618      	mov	r0, r3
 800385a:	3730      	adds	r7, #48	; 0x30
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	e000ed04 	.word	0xe000ed04

08003864 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003878:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10d      	bne.n	800389e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d14d      	bne.n	8003926 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fff6 	bl	8004880 <xTaskPriorityDisinherit>
 8003894:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	e043      	b.n	8003926 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d119      	bne.n	80038d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6858      	ldr	r0, [r3, #4]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	461a      	mov	r2, r3
 80038ae:	68b9      	ldr	r1, [r7, #8]
 80038b0:	f002 f837 	bl	8005922 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	441a      	add	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d32b      	bcc.n	8003926 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	e026      	b.n	8003926 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	68d8      	ldr	r0, [r3, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	461a      	mov	r2, r3
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	f002 f81d 	bl	8005922 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	425b      	negs	r3, r3
 80038f2:	441a      	add	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d207      	bcs.n	8003914 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	425b      	negs	r3, r3
 800390e:	441a      	add	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d105      	bne.n	8003926 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	3b01      	subs	r3, #1
 8003924:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800392e:	697b      	ldr	r3, [r7, #20]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	2b00      	cmp	r3, #0
 8003948:	d018      	beq.n	800397c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	441a      	add	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	429a      	cmp	r2, r3
 8003962:	d303      	bcc.n	800396c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68d9      	ldr	r1, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	461a      	mov	r2, r3
 8003976:	6838      	ldr	r0, [r7, #0]
 8003978:	f001 ffd3 	bl	8005922 <memcpy>
	}
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800398c:	f001 fca6 	bl	80052dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003996:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003998:	e011      	b.n	80039be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d012      	beq.n	80039c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3324      	adds	r3, #36	; 0x24
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fd94 	bl	80044d4 <xTaskRemoveFromEventList>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039b2:	f000 fe67 	bl	8004684 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	dce9      	bgt.n	800399a <prvUnlockQueue+0x16>
 80039c6:	e000      	b.n	80039ca <prvUnlockQueue+0x46>
					break;
 80039c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	22ff      	movs	r2, #255	; 0xff
 80039ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80039d2:	f001 fcb1 	bl	8005338 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039d6:	f001 fc81 	bl	80052dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039e2:	e011      	b.n	8003a08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d012      	beq.n	8003a12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3310      	adds	r3, #16
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fd6f 	bl	80044d4 <xTaskRemoveFromEventList>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039fc:	f000 fe42 	bl	8004684 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a00:	7bbb      	ldrb	r3, [r7, #14]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	dce9      	bgt.n	80039e4 <prvUnlockQueue+0x60>
 8003a10:	e000      	b.n	8003a14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	22ff      	movs	r2, #255	; 0xff
 8003a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a1c:	f001 fc8c 	bl	8005338 <vPortExitCritical>
}
 8003a20:	bf00      	nop
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a30:	f001 fc54 	bl	80052dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d102      	bne.n	8003a42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	e001      	b.n	8003a46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a46:	f001 fc77 	bl	8005338 <vPortExitCritical>

	return xReturn;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a5c:	f001 fc3e 	bl	80052dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d102      	bne.n	8003a72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	e001      	b.n	8003a76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a76:	f001 fc5f 	bl	8005338 <vPortExitCritical>

	return xReturn;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	e014      	b.n	8003abe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a94:	4a0e      	ldr	r2, [pc, #56]	; (8003ad0 <vQueueAddToRegistry+0x4c>)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10b      	bne.n	8003ab8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003aa0:	490b      	ldr	r1, [pc, #44]	; (8003ad0 <vQueueAddToRegistry+0x4c>)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003aaa:	4a09      	ldr	r2, [pc, #36]	; (8003ad0 <vQueueAddToRegistry+0x4c>)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003ab6:	e005      	b.n	8003ac4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	3301      	adds	r3, #1
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b07      	cmp	r3, #7
 8003ac2:	d9e7      	bls.n	8003a94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	20004a18 	.word	0x20004a18

08003ad4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ae4:	f001 fbfa 	bl	80052dc <vPortEnterCritical>
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003aee:	b25b      	sxtb	r3, r3
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d103      	bne.n	8003afe <vQueueWaitForMessageRestricted+0x2a>
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b04:	b25b      	sxtb	r3, r3
 8003b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0a:	d103      	bne.n	8003b14 <vQueueWaitForMessageRestricted+0x40>
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b14:	f001 fc10 	bl	8005338 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d106      	bne.n	8003b2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	3324      	adds	r3, #36	; 0x24
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fca9 	bl	8004480 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b2e:	6978      	ldr	r0, [r7, #20]
 8003b30:	f7ff ff28 	bl	8003984 <prvUnlockQueue>
	}
 8003b34:	bf00      	nop
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08e      	sub	sp, #56	; 0x38
 8003b40:	af04      	add	r7, sp, #16
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d109      	bne.n	8003b64 <xTaskCreateStatic+0x28>
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	623b      	str	r3, [r7, #32]
 8003b62:	e7fe      	b.n	8003b62 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <xTaskCreateStatic+0x42>
 8003b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6e:	f383 8811 	msr	BASEPRI, r3
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	e7fe      	b.n	8003b7c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b7e:	235c      	movs	r3, #92	; 0x5c
 8003b80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2b5c      	cmp	r3, #92	; 0x5c
 8003b86:	d009      	beq.n	8003b9c <xTaskCreateStatic+0x60>
 8003b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	e7fe      	b.n	8003b9a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01e      	beq.n	8003be2 <xTaskCreateStatic+0xa6>
 8003ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d01b      	beq.n	8003be2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	9303      	str	r3, [sp, #12]
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	9302      	str	r3, [sp, #8]
 8003bc4:	f107 0314 	add.w	r3, r7, #20
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f850 	bl	8003c7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bdc:	f000 f8dc 	bl	8003d98 <prvAddNewTaskToReadyList>
 8003be0:	e001      	b.n	8003be6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003be6:	697b      	ldr	r3, [r7, #20]
	}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3728      	adds	r7, #40	; 0x28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08c      	sub	sp, #48	; 0x30
 8003bf4:	af04      	add	r7, sp, #16
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f001 fc83 	bl	8005510 <pvPortMalloc>
 8003c0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00e      	beq.n	8003c30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c12:	205c      	movs	r0, #92	; 0x5c
 8003c14:	f001 fc7c 	bl	8005510 <pvPortMalloc>
 8003c18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30
 8003c26:	e005      	b.n	8003c34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c28:	6978      	ldr	r0, [r7, #20]
 8003c2a:	f001 fd33 	bl	8005694 <vPortFree>
 8003c2e:	e001      	b.n	8003c34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d017      	beq.n	8003c6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c42:	88fa      	ldrh	r2, [r7, #6]
 8003c44:	2300      	movs	r3, #0
 8003c46:	9303      	str	r3, [sp, #12]
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	9302      	str	r3, [sp, #8]
 8003c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4e:	9301      	str	r3, [sp, #4]
 8003c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68b9      	ldr	r1, [r7, #8]
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 f80e 	bl	8003c7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c5e:	69f8      	ldr	r0, [r7, #28]
 8003c60:	f000 f89a 	bl	8003d98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c64:	2301      	movs	r3, #1
 8003c66:	61bb      	str	r3, [r7, #24]
 8003c68:	e002      	b.n	8003c70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c70:	69bb      	ldr	r3, [r7, #24]
	}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b088      	sub	sp, #32
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	607a      	str	r2, [r7, #4]
 8003c86:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	461a      	mov	r2, r3
 8003c92:	21a5      	movs	r1, #165	; 0xa5
 8003c94:	f001 fe50 	bl	8005938 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	f023 0307 	bic.w	r3, r3, #7
 8003cb0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d009      	beq.n	8003cd0 <prvInitialiseNewTask+0x56>
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	e7fe      	b.n	8003cce <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d01f      	beq.n	8003d16 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	e012      	b.n	8003d02 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	7819      	ldrb	r1, [r3, #0]
 8003ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	4413      	add	r3, r2
 8003cea:	3334      	adds	r3, #52	; 0x34
 8003cec:	460a      	mov	r2, r1
 8003cee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d006      	beq.n	8003d0a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	61fb      	str	r3, [r7, #28]
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	2b0f      	cmp	r3, #15
 8003d06:	d9e9      	bls.n	8003cdc <prvInitialiseNewTask+0x62>
 8003d08:	e000      	b.n	8003d0c <prvInitialiseNewTask+0x92>
			{
				break;
 8003d0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d14:	e003      	b.n	8003d1e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	2b37      	cmp	r3, #55	; 0x37
 8003d22:	d901      	bls.n	8003d28 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d24:	2337      	movs	r3, #55	; 0x37
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d36:	2200      	movs	r2, #0
 8003d38:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff f994 	bl	800306c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	3318      	adds	r3, #24
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff f98f 	bl	800306c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	2200      	movs	r2, #0
 8003d68:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	68f9      	ldr	r1, [r7, #12]
 8003d76:	69b8      	ldr	r0, [r7, #24]
 8003d78:	f001 f988 	bl	800508c <pxPortInitialiseStack>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d8e:	bf00      	nop
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003da0:	f001 fa9c 	bl	80052dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003da4:	4b2d      	ldr	r3, [pc, #180]	; (8003e5c <prvAddNewTaskToReadyList+0xc4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3301      	adds	r3, #1
 8003daa:	4a2c      	ldr	r2, [pc, #176]	; (8003e5c <prvAddNewTaskToReadyList+0xc4>)
 8003dac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003dae:	4b2c      	ldr	r3, [pc, #176]	; (8003e60 <prvAddNewTaskToReadyList+0xc8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003db6:	4a2a      	ldr	r2, [pc, #168]	; (8003e60 <prvAddNewTaskToReadyList+0xc8>)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003dbc:	4b27      	ldr	r3, [pc, #156]	; (8003e5c <prvAddNewTaskToReadyList+0xc4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d110      	bne.n	8003de6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003dc4:	f000 fc84 	bl	80046d0 <prvInitialiseTaskLists>
 8003dc8:	e00d      	b.n	8003de6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003dca:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <prvAddNewTaskToReadyList+0xcc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d109      	bne.n	8003de6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003dd2:	4b23      	ldr	r3, [pc, #140]	; (8003e60 <prvAddNewTaskToReadyList+0xc8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d802      	bhi.n	8003de6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003de0:	4a1f      	ldr	r2, [pc, #124]	; (8003e60 <prvAddNewTaskToReadyList+0xc8>)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003de6:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <prvAddNewTaskToReadyList+0xd0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3301      	adds	r3, #1
 8003dec:	4a1e      	ldr	r2, [pc, #120]	; (8003e68 <prvAddNewTaskToReadyList+0xd0>)
 8003dee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003df0:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <prvAddNewTaskToReadyList+0xd0>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfc:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <prvAddNewTaskToReadyList+0xd4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d903      	bls.n	8003e0c <prvAddNewTaskToReadyList+0x74>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <prvAddNewTaskToReadyList+0xd4>)
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4a15      	ldr	r2, [pc, #84]	; (8003e70 <prvAddNewTaskToReadyList+0xd8>)
 8003e1a:	441a      	add	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	4619      	mov	r1, r3
 8003e22:	4610      	mov	r0, r2
 8003e24:	f7ff f92f 	bl	8003086 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e28:	f001 fa86 	bl	8005338 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e2c:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <prvAddNewTaskToReadyList+0xcc>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00e      	beq.n	8003e52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e34:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <prvAddNewTaskToReadyList+0xc8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d207      	bcs.n	8003e52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e42:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <prvAddNewTaskToReadyList+0xdc>)
 8003e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000c28 	.word	0x20000c28
 8003e60:	20000754 	.word	0x20000754
 8003e64:	20000c34 	.word	0x20000c34
 8003e68:	20000c44 	.word	0x20000c44
 8003e6c:	20000c30 	.word	0x20000c30
 8003e70:	20000758 	.word	0x20000758
 8003e74:	e000ed04 	.word	0xe000ed04

08003e78 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d109      	bne.n	8003ea0 <vTaskDelayUntil+0x28>
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	e7fe      	b.n	8003e9e <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <vTaskDelayUntil+0x42>
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	e7fe      	b.n	8003eb8 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8003eba:	4b29      	ldr	r3, [pc, #164]	; (8003f60 <vTaskDelayUntil+0xe8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <vTaskDelayUntil+0x5e>
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	e7fe      	b.n	8003ed4 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8003ed6:	f000 f8e1 	bl	800409c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003eda:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <vTaskDelayUntil+0xec>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6a3a      	ldr	r2, [r7, #32]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d20b      	bcs.n	8003f0c <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d211      	bcs.n	8003f22 <vTaskDelayUntil+0xaa>
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d90d      	bls.n	8003f22 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8003f06:	2301      	movs	r3, #1
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0a:	e00a      	b.n	8003f22 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69fa      	ldr	r2, [r7, #28]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d303      	bcc.n	8003f1e <vTaskDelayUntil+0xa6>
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d901      	bls.n	8003f22 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69fa      	ldr	r2, [r7, #28]
 8003f26:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d006      	beq.n	8003f3c <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2100      	movs	r1, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fd0e 	bl	8004958 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003f3c:	f000 f8bc 	bl	80040b8 <xTaskResumeAll>
 8003f40:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d107      	bne.n	8003f58 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8003f48:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <vTaskDelayUntil+0xf0>)
 8003f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f58:	bf00      	nop
 8003f5a:	3728      	adds	r7, #40	; 0x28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20000c50 	.word	0x20000c50
 8003f64:	20000c2c 	.word	0x20000c2c
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d016      	beq.n	8003fac <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f7e:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <vTaskDelay+0x60>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d009      	beq.n	8003f9a <vTaskDelay+0x2e>
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	e7fe      	b.n	8003f98 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003f9a:	f000 f87f 	bl	800409c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fcd9 	bl	8004958 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fa6:	f000 f887 	bl	80040b8 <xTaskResumeAll>
 8003faa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d107      	bne.n	8003fc2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003fb2:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <vTaskDelay+0x64>)
 8003fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fc2:	bf00      	nop
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000c50 	.word	0x20000c50
 8003fd0:	e000ed04 	.word	0xe000ed04

08003fd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08a      	sub	sp, #40	; 0x28
 8003fd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003fe2:	463a      	mov	r2, r7
 8003fe4:	1d39      	adds	r1, r7, #4
 8003fe6:	f107 0308 	add.w	r3, r7, #8
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe ffea 	bl	8002fc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ff0:	6839      	ldr	r1, [r7, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	9202      	str	r2, [sp, #8]
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	2300      	movs	r3, #0
 8004000:	460a      	mov	r2, r1
 8004002:	4920      	ldr	r1, [pc, #128]	; (8004084 <vTaskStartScheduler+0xb0>)
 8004004:	4820      	ldr	r0, [pc, #128]	; (8004088 <vTaskStartScheduler+0xb4>)
 8004006:	f7ff fd99 	bl	8003b3c <xTaskCreateStatic>
 800400a:	4602      	mov	r2, r0
 800400c:	4b1f      	ldr	r3, [pc, #124]	; (800408c <vTaskStartScheduler+0xb8>)
 800400e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004010:	4b1e      	ldr	r3, [pc, #120]	; (800408c <vTaskStartScheduler+0xb8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004018:	2301      	movs	r3, #1
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	e001      	b.n	8004022 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d102      	bne.n	800402e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004028:	f000 fcea 	bl	8004a00 <xTimerCreateTimerTask>
 800402c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d115      	bne.n	8004060 <vTaskStartScheduler+0x8c>
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <vTaskStartScheduler+0xbc>)
 8004048:	f04f 32ff 	mov.w	r2, #4294967295
 800404c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800404e:	4b11      	ldr	r3, [pc, #68]	; (8004094 <vTaskStartScheduler+0xc0>)
 8004050:	2201      	movs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004054:	4b10      	ldr	r3, [pc, #64]	; (8004098 <vTaskStartScheduler+0xc4>)
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800405a:	f001 f8a1 	bl	80051a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800405e:	e00d      	b.n	800407c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004066:	d109      	bne.n	800407c <vTaskStartScheduler+0xa8>
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	e7fe      	b.n	800407a <vTaskStartScheduler+0xa6>
}
 800407c:	bf00      	nop
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	0800598c 	.word	0x0800598c
 8004088:	0800469d 	.word	0x0800469d
 800408c:	20000c4c 	.word	0x20000c4c
 8004090:	20000c48 	.word	0x20000c48
 8004094:	20000c34 	.word	0x20000c34
 8004098:	20000c2c 	.word	0x20000c2c

0800409c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80040a0:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <vTaskSuspendAll+0x18>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3301      	adds	r3, #1
 80040a6:	4a03      	ldr	r2, [pc, #12]	; (80040b4 <vTaskSuspendAll+0x18>)
 80040a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80040aa:	bf00      	nop
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	20000c50 	.word	0x20000c50

080040b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040c6:	4b41      	ldr	r3, [pc, #260]	; (80041cc <xTaskResumeAll+0x114>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <xTaskResumeAll+0x2a>
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	e7fe      	b.n	80040e0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040e2:	f001 f8fb 	bl	80052dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040e6:	4b39      	ldr	r3, [pc, #228]	; (80041cc <xTaskResumeAll+0x114>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	4a37      	ldr	r2, [pc, #220]	; (80041cc <xTaskResumeAll+0x114>)
 80040ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040f0:	4b36      	ldr	r3, [pc, #216]	; (80041cc <xTaskResumeAll+0x114>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d162      	bne.n	80041be <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040f8:	4b35      	ldr	r3, [pc, #212]	; (80041d0 <xTaskResumeAll+0x118>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d05e      	beq.n	80041be <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004100:	e02f      	b.n	8004162 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004102:	4b34      	ldr	r3, [pc, #208]	; (80041d4 <xTaskResumeAll+0x11c>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3318      	adds	r3, #24
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff f816 	bl	8003140 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	3304      	adds	r3, #4
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff f811 	bl	8003140 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004122:	4b2d      	ldr	r3, [pc, #180]	; (80041d8 <xTaskResumeAll+0x120>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d903      	bls.n	8004132 <xTaskResumeAll+0x7a>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	4a2a      	ldr	r2, [pc, #168]	; (80041d8 <xTaskResumeAll+0x120>)
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4a27      	ldr	r2, [pc, #156]	; (80041dc <xTaskResumeAll+0x124>)
 8004140:	441a      	add	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3304      	adds	r3, #4
 8004146:	4619      	mov	r1, r3
 8004148:	4610      	mov	r0, r2
 800414a:	f7fe ff9c 	bl	8003086 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004152:	4b23      	ldr	r3, [pc, #140]	; (80041e0 <xTaskResumeAll+0x128>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	429a      	cmp	r2, r3
 800415a:	d302      	bcc.n	8004162 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800415c:	4b21      	ldr	r3, [pc, #132]	; (80041e4 <xTaskResumeAll+0x12c>)
 800415e:	2201      	movs	r2, #1
 8004160:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004162:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <xTaskResumeAll+0x11c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1cb      	bne.n	8004102 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004170:	f000 fb48 	bl	8004804 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004174:	4b1c      	ldr	r3, [pc, #112]	; (80041e8 <xTaskResumeAll+0x130>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d010      	beq.n	80041a2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004180:	f000 f846 	bl	8004210 <xTaskIncrementTick>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800418a:	4b16      	ldr	r3, [pc, #88]	; (80041e4 <xTaskResumeAll+0x12c>)
 800418c:	2201      	movs	r2, #1
 800418e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3b01      	subs	r3, #1
 8004194:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1f1      	bne.n	8004180 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800419c:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <xTaskResumeAll+0x130>)
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041a2:	4b10      	ldr	r3, [pc, #64]	; (80041e4 <xTaskResumeAll+0x12c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041aa:	2301      	movs	r3, #1
 80041ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041ae:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <xTaskResumeAll+0x134>)
 80041b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041be:	f001 f8bb 	bl	8005338 <vPortExitCritical>

	return xAlreadyYielded;
 80041c2:	68bb      	ldr	r3, [r7, #8]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20000c50 	.word	0x20000c50
 80041d0:	20000c28 	.word	0x20000c28
 80041d4:	20000be8 	.word	0x20000be8
 80041d8:	20000c30 	.word	0x20000c30
 80041dc:	20000758 	.word	0x20000758
 80041e0:	20000754 	.word	0x20000754
 80041e4:	20000c3c 	.word	0x20000c3c
 80041e8:	20000c38 	.word	0x20000c38
 80041ec:	e000ed04 	.word	0xe000ed04

080041f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <xTaskGetTickCount+0x1c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041fc:	687b      	ldr	r3, [r7, #4]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20000c2c 	.word	0x20000c2c

08004210 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800421a:	4b4e      	ldr	r3, [pc, #312]	; (8004354 <xTaskIncrementTick+0x144>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	f040 8088 	bne.w	8004334 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004224:	4b4c      	ldr	r3, [pc, #304]	; (8004358 <xTaskIncrementTick+0x148>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3301      	adds	r3, #1
 800422a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800422c:	4a4a      	ldr	r2, [pc, #296]	; (8004358 <xTaskIncrementTick+0x148>)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d11f      	bne.n	8004278 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004238:	4b48      	ldr	r3, [pc, #288]	; (800435c <xTaskIncrementTick+0x14c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <xTaskIncrementTick+0x46>
 8004242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	e7fe      	b.n	8004254 <xTaskIncrementTick+0x44>
 8004256:	4b41      	ldr	r3, [pc, #260]	; (800435c <xTaskIncrementTick+0x14c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	4b40      	ldr	r3, [pc, #256]	; (8004360 <xTaskIncrementTick+0x150>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a3e      	ldr	r2, [pc, #248]	; (800435c <xTaskIncrementTick+0x14c>)
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4a3e      	ldr	r2, [pc, #248]	; (8004360 <xTaskIncrementTick+0x150>)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	4b3e      	ldr	r3, [pc, #248]	; (8004364 <xTaskIncrementTick+0x154>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3301      	adds	r3, #1
 8004270:	4a3c      	ldr	r2, [pc, #240]	; (8004364 <xTaskIncrementTick+0x154>)
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	f000 fac6 	bl	8004804 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004278:	4b3b      	ldr	r3, [pc, #236]	; (8004368 <xTaskIncrementTick+0x158>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	429a      	cmp	r2, r3
 8004280:	d349      	bcc.n	8004316 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004282:	4b36      	ldr	r3, [pc, #216]	; (800435c <xTaskIncrementTick+0x14c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d104      	bne.n	8004296 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800428c:	4b36      	ldr	r3, [pc, #216]	; (8004368 <xTaskIncrementTick+0x158>)
 800428e:	f04f 32ff 	mov.w	r2, #4294967295
 8004292:	601a      	str	r2, [r3, #0]
					break;
 8004294:	e03f      	b.n	8004316 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004296:	4b31      	ldr	r3, [pc, #196]	; (800435c <xTaskIncrementTick+0x14c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d203      	bcs.n	80042b6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042ae:	4a2e      	ldr	r2, [pc, #184]	; (8004368 <xTaskIncrementTick+0x158>)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80042b4:	e02f      	b.n	8004316 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	3304      	adds	r3, #4
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe ff40 	bl	8003140 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	3318      	adds	r3, #24
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fe ff37 	bl	8003140 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d6:	4b25      	ldr	r3, [pc, #148]	; (800436c <xTaskIncrementTick+0x15c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d903      	bls.n	80042e6 <xTaskIncrementTick+0xd6>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	4a22      	ldr	r2, [pc, #136]	; (800436c <xTaskIncrementTick+0x15c>)
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4a1f      	ldr	r2, [pc, #124]	; (8004370 <xTaskIncrementTick+0x160>)
 80042f4:	441a      	add	r2, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	3304      	adds	r3, #4
 80042fa:	4619      	mov	r1, r3
 80042fc:	4610      	mov	r0, r2
 80042fe:	f7fe fec2 	bl	8003086 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004306:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <xTaskIncrementTick+0x164>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	429a      	cmp	r2, r3
 800430e:	d3b8      	bcc.n	8004282 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004310:	2301      	movs	r3, #1
 8004312:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004314:	e7b5      	b.n	8004282 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004316:	4b17      	ldr	r3, [pc, #92]	; (8004374 <xTaskIncrementTick+0x164>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431c:	4914      	ldr	r1, [pc, #80]	; (8004370 <xTaskIncrementTick+0x160>)
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d907      	bls.n	800433e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800432e:	2301      	movs	r3, #1
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	e004      	b.n	800433e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004334:	4b10      	ldr	r3, [pc, #64]	; (8004378 <xTaskIncrementTick+0x168>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3301      	adds	r3, #1
 800433a:	4a0f      	ldr	r2, [pc, #60]	; (8004378 <xTaskIncrementTick+0x168>)
 800433c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800433e:	4b0f      	ldr	r3, [pc, #60]	; (800437c <xTaskIncrementTick+0x16c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004346:	2301      	movs	r3, #1
 8004348:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800434a:	697b      	ldr	r3, [r7, #20]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3718      	adds	r7, #24
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20000c50 	.word	0x20000c50
 8004358:	20000c2c 	.word	0x20000c2c
 800435c:	20000be0 	.word	0x20000be0
 8004360:	20000be4 	.word	0x20000be4
 8004364:	20000c40 	.word	0x20000c40
 8004368:	20000c48 	.word	0x20000c48
 800436c:	20000c30 	.word	0x20000c30
 8004370:	20000758 	.word	0x20000758
 8004374:	20000754 	.word	0x20000754
 8004378:	20000c38 	.word	0x20000c38
 800437c:	20000c3c 	.word	0x20000c3c

08004380 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004386:	4b27      	ldr	r3, [pc, #156]	; (8004424 <vTaskSwitchContext+0xa4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800438e:	4b26      	ldr	r3, [pc, #152]	; (8004428 <vTaskSwitchContext+0xa8>)
 8004390:	2201      	movs	r2, #1
 8004392:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004394:	e040      	b.n	8004418 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004396:	4b24      	ldr	r3, [pc, #144]	; (8004428 <vTaskSwitchContext+0xa8>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800439c:	4b23      	ldr	r3, [pc, #140]	; (800442c <vTaskSwitchContext+0xac>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	e00f      	b.n	80043c4 <vTaskSwitchContext+0x44>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <vTaskSwitchContext+0x3e>
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	607b      	str	r3, [r7, #4]
 80043bc:	e7fe      	b.n	80043bc <vTaskSwitchContext+0x3c>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	491a      	ldr	r1, [pc, #104]	; (8004430 <vTaskSwitchContext+0xb0>)
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0e5      	beq.n	80043a4 <vTaskSwitchContext+0x24>
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4a13      	ldr	r2, [pc, #76]	; (8004430 <vTaskSwitchContext+0xb0>)
 80043e4:	4413      	add	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	3308      	adds	r3, #8
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d104      	bne.n	8004408 <vTaskSwitchContext+0x88>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	605a      	str	r2, [r3, #4]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	4a09      	ldr	r2, [pc, #36]	; (8004434 <vTaskSwitchContext+0xb4>)
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	4a06      	ldr	r2, [pc, #24]	; (800442c <vTaskSwitchContext+0xac>)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	20000c50 	.word	0x20000c50
 8004428:	20000c3c 	.word	0x20000c3c
 800442c:	20000c30 	.word	0x20000c30
 8004430:	20000758 	.word	0x20000758
 8004434:	20000754 	.word	0x20000754

08004438 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <vTaskPlaceOnEventList+0x24>
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	e7fe      	b.n	800445a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800445c:	4b07      	ldr	r3, [pc, #28]	; (800447c <vTaskPlaceOnEventList+0x44>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3318      	adds	r3, #24
 8004462:	4619      	mov	r1, r3
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7fe fe32 	bl	80030ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800446a:	2101      	movs	r1, #1
 800446c:	6838      	ldr	r0, [r7, #0]
 800446e:	f000 fa73 	bl	8004958 <prvAddCurrentTaskToDelayedList>
}
 8004472:	bf00      	nop
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000754 	.word	0x20000754

08004480 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <vTaskPlaceOnEventListRestricted+0x26>
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	e7fe      	b.n	80044a4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <vTaskPlaceOnEventListRestricted+0x50>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3318      	adds	r3, #24
 80044ac:	4619      	mov	r1, r3
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f7fe fde9 	bl	8003086 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80044ba:	f04f 33ff 	mov.w	r3, #4294967295
 80044be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	68b8      	ldr	r0, [r7, #8]
 80044c4:	f000 fa48 	bl	8004958 <prvAddCurrentTaskToDelayedList>
	}
 80044c8:	bf00      	nop
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	20000754 	.word	0x20000754

080044d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <xTaskRemoveFromEventList+0x2a>
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	e7fe      	b.n	80044fc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	3318      	adds	r3, #24
 8004502:	4618      	mov	r0, r3
 8004504:	f7fe fe1c 	bl	8003140 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004508:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <xTaskRemoveFromEventList+0xac>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d11d      	bne.n	800454c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	3304      	adds	r3, #4
 8004514:	4618      	mov	r0, r3
 8004516:	f7fe fe13 	bl	8003140 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451e:	4b19      	ldr	r3, [pc, #100]	; (8004584 <xTaskRemoveFromEventList+0xb0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d903      	bls.n	800452e <xTaskRemoveFromEventList+0x5a>
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	4a16      	ldr	r2, [pc, #88]	; (8004584 <xTaskRemoveFromEventList+0xb0>)
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4a13      	ldr	r2, [pc, #76]	; (8004588 <xTaskRemoveFromEventList+0xb4>)
 800453c:	441a      	add	r2, r3
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	3304      	adds	r3, #4
 8004542:	4619      	mov	r1, r3
 8004544:	4610      	mov	r0, r2
 8004546:	f7fe fd9e 	bl	8003086 <vListInsertEnd>
 800454a:	e005      	b.n	8004558 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	3318      	adds	r3, #24
 8004550:	4619      	mov	r1, r3
 8004552:	480e      	ldr	r0, [pc, #56]	; (800458c <xTaskRemoveFromEventList+0xb8>)
 8004554:	f7fe fd97 	bl	8003086 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <xTaskRemoveFromEventList+0xbc>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	429a      	cmp	r2, r3
 8004564:	d905      	bls.n	8004572 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004566:	2301      	movs	r3, #1
 8004568:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800456a:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <xTaskRemoveFromEventList+0xc0>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	e001      	b.n	8004576 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004572:	2300      	movs	r3, #0
 8004574:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004576:	697b      	ldr	r3, [r7, #20]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	20000c50 	.word	0x20000c50
 8004584:	20000c30 	.word	0x20000c30
 8004588:	20000758 	.word	0x20000758
 800458c:	20000be8 	.word	0x20000be8
 8004590:	20000754 	.word	0x20000754
 8004594:	20000c3c 	.word	0x20000c3c

08004598 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80045a0:	4b06      	ldr	r3, [pc, #24]	; (80045bc <vTaskInternalSetTimeOutState+0x24>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <vTaskInternalSetTimeOutState+0x28>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	605a      	str	r2, [r3, #4]
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	20000c40 	.word	0x20000c40
 80045c0:	20000c2c 	.word	0x20000c2c

080045c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d109      	bne.n	80045e8 <xTaskCheckForTimeOut+0x24>
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	e7fe      	b.n	80045e6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <xTaskCheckForTimeOut+0x3e>
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	e7fe      	b.n	8004600 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004602:	f000 fe6b 	bl	80052dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004606:	4b1d      	ldr	r3, [pc, #116]	; (800467c <xTaskCheckForTimeOut+0xb8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461e:	d102      	bne.n	8004626 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004620:	2300      	movs	r3, #0
 8004622:	61fb      	str	r3, [r7, #28]
 8004624:	e023      	b.n	800466e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	4b15      	ldr	r3, [pc, #84]	; (8004680 <xTaskCheckForTimeOut+0xbc>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d007      	beq.n	8004642 <xTaskCheckForTimeOut+0x7e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	429a      	cmp	r2, r3
 800463a:	d302      	bcc.n	8004642 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800463c:	2301      	movs	r3, #1
 800463e:	61fb      	str	r3, [r7, #28]
 8004640:	e015      	b.n	800466e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	429a      	cmp	r2, r3
 800464a:	d20b      	bcs.n	8004664 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	1ad2      	subs	r2, r2, r3
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff ff9d 	bl	8004598 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800465e:	2300      	movs	r3, #0
 8004660:	61fb      	str	r3, [r7, #28]
 8004662:	e004      	b.n	800466e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800466a:	2301      	movs	r3, #1
 800466c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800466e:	f000 fe63 	bl	8005338 <vPortExitCritical>

	return xReturn;
 8004672:	69fb      	ldr	r3, [r7, #28]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3720      	adds	r7, #32
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000c2c 	.word	0x20000c2c
 8004680:	20000c40 	.word	0x20000c40

08004684 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004688:	4b03      	ldr	r3, [pc, #12]	; (8004698 <vTaskMissedYield+0x14>)
 800468a:	2201      	movs	r2, #1
 800468c:	601a      	str	r2, [r3, #0]
}
 800468e:	bf00      	nop
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	20000c3c 	.word	0x20000c3c

0800469c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046a4:	f000 f854 	bl	8004750 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046a8:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <prvIdleTask+0x2c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d907      	bls.n	80046c0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <prvIdleTask+0x30>)
 80046b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80046c0:	f7fc f8da 	bl	8000878 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80046c4:	e7ee      	b.n	80046a4 <prvIdleTask+0x8>
 80046c6:	bf00      	nop
 80046c8:	20000758 	.word	0x20000758
 80046cc:	e000ed04 	.word	0xe000ed04

080046d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046d6:	2300      	movs	r3, #0
 80046d8:	607b      	str	r3, [r7, #4]
 80046da:	e00c      	b.n	80046f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4a12      	ldr	r2, [pc, #72]	; (8004730 <prvInitialiseTaskLists+0x60>)
 80046e8:	4413      	add	r3, r2
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fe fc9e 	bl	800302c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3301      	adds	r3, #1
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b37      	cmp	r3, #55	; 0x37
 80046fa:	d9ef      	bls.n	80046dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046fc:	480d      	ldr	r0, [pc, #52]	; (8004734 <prvInitialiseTaskLists+0x64>)
 80046fe:	f7fe fc95 	bl	800302c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004702:	480d      	ldr	r0, [pc, #52]	; (8004738 <prvInitialiseTaskLists+0x68>)
 8004704:	f7fe fc92 	bl	800302c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004708:	480c      	ldr	r0, [pc, #48]	; (800473c <prvInitialiseTaskLists+0x6c>)
 800470a:	f7fe fc8f 	bl	800302c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800470e:	480c      	ldr	r0, [pc, #48]	; (8004740 <prvInitialiseTaskLists+0x70>)
 8004710:	f7fe fc8c 	bl	800302c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004714:	480b      	ldr	r0, [pc, #44]	; (8004744 <prvInitialiseTaskLists+0x74>)
 8004716:	f7fe fc89 	bl	800302c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <prvInitialiseTaskLists+0x78>)
 800471c:	4a05      	ldr	r2, [pc, #20]	; (8004734 <prvInitialiseTaskLists+0x64>)
 800471e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <prvInitialiseTaskLists+0x7c>)
 8004722:	4a05      	ldr	r2, [pc, #20]	; (8004738 <prvInitialiseTaskLists+0x68>)
 8004724:	601a      	str	r2, [r3, #0]
}
 8004726:	bf00      	nop
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000758 	.word	0x20000758
 8004734:	20000bb8 	.word	0x20000bb8
 8004738:	20000bcc 	.word	0x20000bcc
 800473c:	20000be8 	.word	0x20000be8
 8004740:	20000bfc 	.word	0x20000bfc
 8004744:	20000c14 	.word	0x20000c14
 8004748:	20000be0 	.word	0x20000be0
 800474c:	20000be4 	.word	0x20000be4

08004750 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004756:	e019      	b.n	800478c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004758:	f000 fdc0 	bl	80052dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800475c:	4b0f      	ldr	r3, [pc, #60]	; (800479c <prvCheckTasksWaitingTermination+0x4c>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	4618      	mov	r0, r3
 800476a:	f7fe fce9 	bl	8003140 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800476e:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <prvCheckTasksWaitingTermination+0x50>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3b01      	subs	r3, #1
 8004774:	4a0a      	ldr	r2, [pc, #40]	; (80047a0 <prvCheckTasksWaitingTermination+0x50>)
 8004776:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004778:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <prvCheckTasksWaitingTermination+0x54>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3b01      	subs	r3, #1
 800477e:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <prvCheckTasksWaitingTermination+0x54>)
 8004780:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004782:	f000 fdd9 	bl	8005338 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f80e 	bl	80047a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <prvCheckTasksWaitingTermination+0x54>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e1      	bne.n	8004758 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004794:	bf00      	nop
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000bfc 	.word	0x20000bfc
 80047a0:	20000c28 	.word	0x20000c28
 80047a4:	20000c10 	.word	0x20000c10

080047a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d108      	bne.n	80047cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 ff68 	bl	8005694 <vPortFree>
				vPortFree( pxTCB );
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 ff65 	bl	8005694 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047ca:	e017      	b.n	80047fc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d103      	bne.n	80047de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 ff5c 	bl	8005694 <vPortFree>
	}
 80047dc:	e00e      	b.n	80047fc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d009      	beq.n	80047fc <prvDeleteTCB+0x54>
 80047e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	e7fe      	b.n	80047fa <prvDeleteTCB+0x52>
	}
 80047fc:	bf00      	nop
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800480a:	4b0c      	ldr	r3, [pc, #48]	; (800483c <prvResetNextTaskUnblockTime+0x38>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d104      	bne.n	800481e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004814:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <prvResetNextTaskUnblockTime+0x3c>)
 8004816:	f04f 32ff 	mov.w	r2, #4294967295
 800481a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800481c:	e008      	b.n	8004830 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800481e:	4b07      	ldr	r3, [pc, #28]	; (800483c <prvResetNextTaskUnblockTime+0x38>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	4a04      	ldr	r2, [pc, #16]	; (8004840 <prvResetNextTaskUnblockTime+0x3c>)
 800482e:	6013      	str	r3, [r2, #0]
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	20000be0 	.word	0x20000be0
 8004840:	20000c48 	.word	0x20000c48

08004844 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800484a:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <xTaskGetSchedulerState+0x34>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d102      	bne.n	8004858 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004852:	2301      	movs	r3, #1
 8004854:	607b      	str	r3, [r7, #4]
 8004856:	e008      	b.n	800486a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004858:	4b08      	ldr	r3, [pc, #32]	; (800487c <xTaskGetSchedulerState+0x38>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d102      	bne.n	8004866 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004860:	2302      	movs	r3, #2
 8004862:	607b      	str	r3, [r7, #4]
 8004864:	e001      	b.n	800486a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004866:	2300      	movs	r3, #0
 8004868:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800486a:	687b      	ldr	r3, [r7, #4]
	}
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	20000c34 	.word	0x20000c34
 800487c:	20000c50 	.word	0x20000c50

08004880 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d054      	beq.n	8004940 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004896:	4b2d      	ldr	r3, [pc, #180]	; (800494c <xTaskPriorityDisinherit+0xcc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	429a      	cmp	r2, r3
 800489e:	d009      	beq.n	80048b4 <xTaskPriorityDisinherit+0x34>
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	e7fe      	b.n	80048b2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d109      	bne.n	80048d0 <xTaskPriorityDisinherit+0x50>
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	e7fe      	b.n	80048ce <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d4:	1e5a      	subs	r2, r3, #1
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d02c      	beq.n	8004940 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d128      	bne.n	8004940 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	3304      	adds	r3, #4
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fe fc24 	bl	8003140 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004910:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <xTaskPriorityDisinherit+0xd0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d903      	bls.n	8004920 <xTaskPriorityDisinherit+0xa0>
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	4a0c      	ldr	r2, [pc, #48]	; (8004950 <xTaskPriorityDisinherit+0xd0>)
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4a09      	ldr	r2, [pc, #36]	; (8004954 <xTaskPriorityDisinherit+0xd4>)
 800492e:	441a      	add	r2, r3
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	3304      	adds	r3, #4
 8004934:	4619      	mov	r1, r3
 8004936:	4610      	mov	r0, r2
 8004938:	f7fe fba5 	bl	8003086 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800493c:	2301      	movs	r3, #1
 800493e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004940:	697b      	ldr	r3, [r7, #20]
	}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20000754 	.word	0x20000754
 8004950:	20000c30 	.word	0x20000c30
 8004954:	20000758 	.word	0x20000758

08004958 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004962:	4b21      	ldr	r3, [pc, #132]	; (80049e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004968:	4b20      	ldr	r3, [pc, #128]	; (80049ec <prvAddCurrentTaskToDelayedList+0x94>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3304      	adds	r3, #4
 800496e:	4618      	mov	r0, r3
 8004970:	f7fe fbe6 	bl	8003140 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497a:	d10a      	bne.n	8004992 <prvAddCurrentTaskToDelayedList+0x3a>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004982:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <prvAddCurrentTaskToDelayedList+0x94>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3304      	adds	r3, #4
 8004988:	4619      	mov	r1, r3
 800498a:	4819      	ldr	r0, [pc, #100]	; (80049f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800498c:	f7fe fb7b 	bl	8003086 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004990:	e026      	b.n	80049e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4413      	add	r3, r2
 8004998:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800499a:	4b14      	ldr	r3, [pc, #80]	; (80049ec <prvAddCurrentTaskToDelayedList+0x94>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d209      	bcs.n	80049be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049aa:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <prvAddCurrentTaskToDelayedList+0x94>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4619      	mov	r1, r3
 80049b6:	4610      	mov	r0, r2
 80049b8:	f7fe fb89 	bl	80030ce <vListInsert>
}
 80049bc:	e010      	b.n	80049e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049be:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <prvAddCurrentTaskToDelayedList+0x94>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3304      	adds	r3, #4
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f7fe fb7f 	bl	80030ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049d0:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d202      	bcs.n	80049e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80049da:	4a08      	ldr	r2, [pc, #32]	; (80049fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	6013      	str	r3, [r2, #0]
}
 80049e0:	bf00      	nop
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000c2c 	.word	0x20000c2c
 80049ec:	20000754 	.word	0x20000754
 80049f0:	20000c14 	.word	0x20000c14
 80049f4:	20000be4 	.word	0x20000be4
 80049f8:	20000be0 	.word	0x20000be0
 80049fc:	20000c48 	.word	0x20000c48

08004a00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08a      	sub	sp, #40	; 0x28
 8004a04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a0a:	f000 faff 	bl	800500c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a0e:	4b1c      	ldr	r3, [pc, #112]	; (8004a80 <xTimerCreateTimerTask+0x80>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d021      	beq.n	8004a5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a1e:	1d3a      	adds	r2, r7, #4
 8004a20:	f107 0108 	add.w	r1, r7, #8
 8004a24:	f107 030c 	add.w	r3, r7, #12
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fe fae5 	bl	8002ff8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	9202      	str	r2, [sp, #8]
 8004a36:	9301      	str	r3, [sp, #4]
 8004a38:	2302      	movs	r3, #2
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	460a      	mov	r2, r1
 8004a40:	4910      	ldr	r1, [pc, #64]	; (8004a84 <xTimerCreateTimerTask+0x84>)
 8004a42:	4811      	ldr	r0, [pc, #68]	; (8004a88 <xTimerCreateTimerTask+0x88>)
 8004a44:	f7ff f87a 	bl	8003b3c <xTaskCreateStatic>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4b10      	ldr	r3, [pc, #64]	; (8004a8c <xTimerCreateTimerTask+0x8c>)
 8004a4c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <xTimerCreateTimerTask+0x8c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a56:	2301      	movs	r3, #1
 8004a58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d109      	bne.n	8004a74 <xTimerCreateTimerTask+0x74>
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	e7fe      	b.n	8004a72 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004a74:	697b      	ldr	r3, [r7, #20]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000c84 	.word	0x20000c84
 8004a84:	08005994 	.word	0x08005994
 8004a88:	08004bc1 	.word	0x08004bc1
 8004a8c:	20000c88 	.word	0x20000c88

08004a90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	; 0x28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d109      	bne.n	8004abc <xTimerGenericCommand+0x2c>
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	623b      	str	r3, [r7, #32]
 8004aba:	e7fe      	b.n	8004aba <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004abc:	4b19      	ldr	r3, [pc, #100]	; (8004b24 <xTimerGenericCommand+0x94>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d02a      	beq.n	8004b1a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b05      	cmp	r3, #5
 8004ad4:	dc18      	bgt.n	8004b08 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ad6:	f7ff feb5 	bl	8004844 <xTaskGetSchedulerState>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d109      	bne.n	8004af4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ae0:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <xTimerGenericCommand+0x94>)
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	f107 0110 	add.w	r1, r7, #16
 8004ae8:	2300      	movs	r3, #0
 8004aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aec:	f7fe fc50 	bl	8003390 <xQueueGenericSend>
 8004af0:	6278      	str	r0, [r7, #36]	; 0x24
 8004af2:	e012      	b.n	8004b1a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004af4:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <xTimerGenericCommand+0x94>)
 8004af6:	6818      	ldr	r0, [r3, #0]
 8004af8:	f107 0110 	add.w	r1, r7, #16
 8004afc:	2300      	movs	r3, #0
 8004afe:	2200      	movs	r2, #0
 8004b00:	f7fe fc46 	bl	8003390 <xQueueGenericSend>
 8004b04:	6278      	str	r0, [r7, #36]	; 0x24
 8004b06:	e008      	b.n	8004b1a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <xTimerGenericCommand+0x94>)
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	f107 0110 	add.w	r1, r7, #16
 8004b10:	2300      	movs	r3, #0
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	f7fe fd36 	bl	8003584 <xQueueGenericSendFromISR>
 8004b18:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3728      	adds	r7, #40	; 0x28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20000c84 	.word	0x20000c84

08004b28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b32:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <prvProcessExpiredTimer+0x94>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fe fafd 	bl	8003140 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d021      	beq.n	8004b98 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	699a      	ldr	r2, [r3, #24]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	18d1      	adds	r1, r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	6978      	ldr	r0, [r7, #20]
 8004b62:	f000 f8d1 	bl	8004d08 <prvInsertTimerInActiveList>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d01e      	beq.n	8004baa <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	2300      	movs	r3, #0
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	2100      	movs	r1, #0
 8004b76:	6978      	ldr	r0, [r7, #20]
 8004b78:	f7ff ff8a 	bl	8004a90 <xTimerGenericCommand>
 8004b7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d112      	bne.n	8004baa <prvProcessExpiredTimer+0x82>
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	e7fe      	b.n	8004b96 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b9e:	f023 0301 	bic.w	r3, r3, #1
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	6978      	ldr	r0, [r7, #20]
 8004bb0:	4798      	blx	r3
}
 8004bb2:	bf00      	nop
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	20000c7c 	.word	0x20000c7c

08004bc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bc8:	f107 0308 	add.w	r3, r7, #8
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 f857 	bl	8004c80 <prvGetNextExpireTime>
 8004bd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f803 	bl	8004be4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004bde:	f000 f8d5 	bl	8004d8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004be2:	e7f1      	b.n	8004bc8 <prvTimerTask+0x8>

08004be4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bee:	f7ff fa55 	bl	800409c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bf2:	f107 0308 	add.w	r3, r7, #8
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f866 	bl	8004cc8 <prvSampleTimeNow>
 8004bfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d130      	bne.n	8004c66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10a      	bne.n	8004c20 <prvProcessTimerOrBlockTask+0x3c>
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d806      	bhi.n	8004c20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c12:	f7ff fa51 	bl	80040b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c16:	68f9      	ldr	r1, [r7, #12]
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff ff85 	bl	8004b28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c1e:	e024      	b.n	8004c6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d008      	beq.n	8004c38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c26:	4b13      	ldr	r3, [pc, #76]	; (8004c74 <prvProcessTimerOrBlockTask+0x90>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <prvProcessTimerOrBlockTask+0x50>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <prvProcessTimerOrBlockTask+0x52>
 8004c34:	2300      	movs	r3, #0
 8004c36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c38:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <prvProcessTimerOrBlockTask+0x94>)
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	4619      	mov	r1, r3
 8004c46:	f7fe ff45 	bl	8003ad4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c4a:	f7ff fa35 	bl	80040b8 <xTaskResumeAll>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c54:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <prvProcessTimerOrBlockTask+0x98>)
 8004c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	f3bf 8f6f 	isb	sy
}
 8004c64:	e001      	b.n	8004c6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c66:	f7ff fa27 	bl	80040b8 <xTaskResumeAll>
}
 8004c6a:	bf00      	nop
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000c80 	.word	0x20000c80
 8004c78:	20000c84 	.word	0x20000c84
 8004c7c:	e000ed04 	.word	0xe000ed04

08004c80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c88:	4b0e      	ldr	r3, [pc, #56]	; (8004cc4 <prvGetNextExpireTime+0x44>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <prvGetNextExpireTime+0x16>
 8004c92:	2201      	movs	r2, #1
 8004c94:	e000      	b.n	8004c98 <prvGetNextExpireTime+0x18>
 8004c96:	2200      	movs	r2, #0
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d105      	bne.n	8004cb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ca4:	4b07      	ldr	r3, [pc, #28]	; (8004cc4 <prvGetNextExpireTime+0x44>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	e001      	b.n	8004cb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20000c7c 	.word	0x20000c7c

08004cc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004cd0:	f7ff fa8e 	bl	80041f0 <xTaskGetTickCount>
 8004cd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <prvSampleTimeNow+0x3c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d205      	bcs.n	8004cec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ce0:	f000 f930 	bl	8004f44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e002      	b.n	8004cf2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cf2:	4a04      	ldr	r2, [pc, #16]	; (8004d04 <prvSampleTimeNow+0x3c>)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20000c8c 	.word	0x20000c8c

08004d08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d812      	bhi.n	8004d54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	1ad2      	subs	r2, r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d302      	bcc.n	8004d42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	e01b      	b.n	8004d7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d42:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <prvInsertTimerInActiveList+0x7c>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	f7fe f9be 	bl	80030ce <vListInsert>
 8004d52:	e012      	b.n	8004d7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d206      	bcs.n	8004d6a <prvInsertTimerInActiveList+0x62>
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d302      	bcc.n	8004d6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d64:	2301      	movs	r3, #1
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	e007      	b.n	8004d7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d6a:	4b07      	ldr	r3, [pc, #28]	; (8004d88 <prvInsertTimerInActiveList+0x80>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3304      	adds	r3, #4
 8004d72:	4619      	mov	r1, r3
 8004d74:	4610      	mov	r0, r2
 8004d76:	f7fe f9aa 	bl	80030ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d7a:	697b      	ldr	r3, [r7, #20]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20000c80 	.word	0x20000c80
 8004d88:	20000c7c 	.word	0x20000c7c

08004d8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08e      	sub	sp, #56	; 0x38
 8004d90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d92:	e0c6      	b.n	8004f22 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	da17      	bge.n	8004dca <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d9a:	1d3b      	adds	r3, r7, #4
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d109      	bne.n	8004dba <prvProcessReceivedCommands+0x2e>
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	61fb      	str	r3, [r7, #28]
 8004db8:	e7fe      	b.n	8004db8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dc0:	6850      	ldr	r0, [r2, #4]
 8004dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dc4:	6892      	ldr	r2, [r2, #8]
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f2c0 80a7 	blt.w	8004f20 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d004      	beq.n	8004de8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	3304      	adds	r3, #4
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fe f9ac 	bl	8003140 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004de8:	463b      	mov	r3, r7
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7ff ff6c 	bl	8004cc8 <prvSampleTimeNow>
 8004df0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b09      	cmp	r3, #9
 8004df6:	f200 8094 	bhi.w	8004f22 <prvProcessReceivedCommands+0x196>
 8004dfa:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <prvProcessReceivedCommands+0x74>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004e29 	.word	0x08004e29
 8004e04:	08004e29 	.word	0x08004e29
 8004e08:	08004e29 	.word	0x08004e29
 8004e0c:	08004e9b 	.word	0x08004e9b
 8004e10:	08004eaf 	.word	0x08004eaf
 8004e14:	08004ef7 	.word	0x08004ef7
 8004e18:	08004e29 	.word	0x08004e29
 8004e1c:	08004e29 	.word	0x08004e29
 8004e20:	08004e9b 	.word	0x08004e9b
 8004e24:	08004eaf 	.word	0x08004eaf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e2e:	f043 0301 	orr.w	r3, r3, #1
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	18d1      	adds	r1, r2, r3
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e48:	f7ff ff5e 	bl	8004d08 <prvInsertTimerInActiveList>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d067      	beq.n	8004f22 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d05c      	beq.n	8004f22 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	441a      	add	r2, r3
 8004e70:	2300      	movs	r3, #0
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	2300      	movs	r3, #0
 8004e76:	2100      	movs	r1, #0
 8004e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e7a:	f7ff fe09 	bl	8004a90 <xTimerGenericCommand>
 8004e7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d14d      	bne.n	8004f22 <prvProcessReceivedCommands+0x196>
 8004e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	61bb      	str	r3, [r7, #24]
 8004e98:	e7fe      	b.n	8004e98 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004eac:	e039      	b.n	8004f22 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eb4:	f043 0301 	orr.w	r3, r3, #1
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d109      	bne.n	8004ee2 <prvProcessReceivedCommands+0x156>
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	e7fe      	b.n	8004ee0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	18d1      	adds	r1, r2, r3
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ef0:	f7ff ff0a 	bl	8004d08 <prvInsertTimerInActiveList>
					break;
 8004ef4:	e015      	b.n	8004f22 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d103      	bne.n	8004f0c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f06:	f000 fbc5 	bl	8005694 <vPortFree>
 8004f0a:	e00a      	b.n	8004f22 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f12:	f023 0301 	bic.w	r3, r3, #1
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f1e:	e000      	b.n	8004f22 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004f20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f22:	4b07      	ldr	r3, [pc, #28]	; (8004f40 <prvProcessReceivedCommands+0x1b4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	1d39      	adds	r1, r7, #4
 8004f28:	2200      	movs	r2, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fe fbbe 	bl	80036ac <xQueueReceive>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f47f af2e 	bne.w	8004d94 <prvProcessReceivedCommands+0x8>
	}
}
 8004f38:	bf00      	nop
 8004f3a:	3730      	adds	r7, #48	; 0x30
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	20000c84 	.word	0x20000c84

08004f44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f4a:	e047      	b.n	8004fdc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f4c:	4b2d      	ldr	r3, [pc, #180]	; (8005004 <prvSwitchTimerLists+0xc0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f56:	4b2b      	ldr	r3, [pc, #172]	; (8005004 <prvSwitchTimerLists+0xc0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3304      	adds	r3, #4
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fe f8eb 	bl	8003140 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d02d      	beq.n	8004fdc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4413      	add	r3, r2
 8004f88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d90e      	bls.n	8004fb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f9e:	4b19      	ldr	r3, [pc, #100]	; (8005004 <prvSwitchTimerLists+0xc0>)
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4610      	mov	r0, r2
 8004faa:	f7fe f890 	bl	80030ce <vListInsert>
 8004fae:	e015      	b.n	8004fdc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	2100      	movs	r1, #0
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f7ff fd68 	bl	8004a90 <xTimerGenericCommand>
 8004fc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d109      	bne.n	8004fdc <prvSwitchTimerLists+0x98>
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	603b      	str	r3, [r7, #0]
 8004fda:	e7fe      	b.n	8004fda <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fdc:	4b09      	ldr	r3, [pc, #36]	; (8005004 <prvSwitchTimerLists+0xc0>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1b2      	bne.n	8004f4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004fe6:	4b07      	ldr	r3, [pc, #28]	; (8005004 <prvSwitchTimerLists+0xc0>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004fec:	4b06      	ldr	r3, [pc, #24]	; (8005008 <prvSwitchTimerLists+0xc4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a04      	ldr	r2, [pc, #16]	; (8005004 <prvSwitchTimerLists+0xc0>)
 8004ff2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ff4:	4a04      	ldr	r2, [pc, #16]	; (8005008 <prvSwitchTimerLists+0xc4>)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	6013      	str	r3, [r2, #0]
}
 8004ffa:	bf00      	nop
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000c7c 	.word	0x20000c7c
 8005008:	20000c80 	.word	0x20000c80

0800500c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005012:	f000 f963 	bl	80052dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005016:	4b15      	ldr	r3, [pc, #84]	; (800506c <prvCheckForValidListAndQueue+0x60>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d120      	bne.n	8005060 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800501e:	4814      	ldr	r0, [pc, #80]	; (8005070 <prvCheckForValidListAndQueue+0x64>)
 8005020:	f7fe f804 	bl	800302c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005024:	4813      	ldr	r0, [pc, #76]	; (8005074 <prvCheckForValidListAndQueue+0x68>)
 8005026:	f7fe f801 	bl	800302c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800502a:	4b13      	ldr	r3, [pc, #76]	; (8005078 <prvCheckForValidListAndQueue+0x6c>)
 800502c:	4a10      	ldr	r2, [pc, #64]	; (8005070 <prvCheckForValidListAndQueue+0x64>)
 800502e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005030:	4b12      	ldr	r3, [pc, #72]	; (800507c <prvCheckForValidListAndQueue+0x70>)
 8005032:	4a10      	ldr	r2, [pc, #64]	; (8005074 <prvCheckForValidListAndQueue+0x68>)
 8005034:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005036:	2300      	movs	r3, #0
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	4b11      	ldr	r3, [pc, #68]	; (8005080 <prvCheckForValidListAndQueue+0x74>)
 800503c:	4a11      	ldr	r2, [pc, #68]	; (8005084 <prvCheckForValidListAndQueue+0x78>)
 800503e:	2110      	movs	r1, #16
 8005040:	200a      	movs	r0, #10
 8005042:	f7fe f90f 	bl	8003264 <xQueueGenericCreateStatic>
 8005046:	4602      	mov	r2, r0
 8005048:	4b08      	ldr	r3, [pc, #32]	; (800506c <prvCheckForValidListAndQueue+0x60>)
 800504a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800504c:	4b07      	ldr	r3, [pc, #28]	; (800506c <prvCheckForValidListAndQueue+0x60>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005054:	4b05      	ldr	r3, [pc, #20]	; (800506c <prvCheckForValidListAndQueue+0x60>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	490b      	ldr	r1, [pc, #44]	; (8005088 <prvCheckForValidListAndQueue+0x7c>)
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe fd12 	bl	8003a84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005060:	f000 f96a 	bl	8005338 <vPortExitCritical>
}
 8005064:	bf00      	nop
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20000c84 	.word	0x20000c84
 8005070:	20000c54 	.word	0x20000c54
 8005074:	20000c68 	.word	0x20000c68
 8005078:	20000c7c 	.word	0x20000c7c
 800507c:	20000c80 	.word	0x20000c80
 8005080:	20000d30 	.word	0x20000d30
 8005084:	20000c90 	.word	0x20000c90
 8005088:	0800599c 	.word	0x0800599c

0800508c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3b04      	subs	r3, #4
 800509c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3b04      	subs	r3, #4
 80050aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f023 0201 	bic.w	r2, r3, #1
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3b04      	subs	r3, #4
 80050ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80050bc:	4a0c      	ldr	r2, [pc, #48]	; (80050f0 <pxPortInitialiseStack+0x64>)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3b14      	subs	r3, #20
 80050c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3b04      	subs	r3, #4
 80050d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f06f 0202 	mvn.w	r2, #2
 80050da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3b20      	subs	r3, #32
 80050e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050e2:	68fb      	ldr	r3, [r7, #12]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	080050f5 	.word	0x080050f5

080050f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050fe:	4b11      	ldr	r3, [pc, #68]	; (8005144 <prvTaskExitError+0x50>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005106:	d009      	beq.n	800511c <prvTaskExitError+0x28>
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	e7fe      	b.n	800511a <prvTaskExitError+0x26>
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800512e:	bf00      	nop
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0fc      	beq.n	8005130 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005136:	bf00      	nop
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	2000000c 	.word	0x2000000c
	...

08005150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005150:	4b07      	ldr	r3, [pc, #28]	; (8005170 <pxCurrentTCBConst2>)
 8005152:	6819      	ldr	r1, [r3, #0]
 8005154:	6808      	ldr	r0, [r1, #0]
 8005156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515a:	f380 8809 	msr	PSP, r0
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f04f 0000 	mov.w	r0, #0
 8005166:	f380 8811 	msr	BASEPRI, r0
 800516a:	4770      	bx	lr
 800516c:	f3af 8000 	nop.w

08005170 <pxCurrentTCBConst2>:
 8005170:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop

08005178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005178:	4808      	ldr	r0, [pc, #32]	; (800519c <prvPortStartFirstTask+0x24>)
 800517a:	6800      	ldr	r0, [r0, #0]
 800517c:	6800      	ldr	r0, [r0, #0]
 800517e:	f380 8808 	msr	MSP, r0
 8005182:	f04f 0000 	mov.w	r0, #0
 8005186:	f380 8814 	msr	CONTROL, r0
 800518a:	b662      	cpsie	i
 800518c:	b661      	cpsie	f
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	df00      	svc	0
 8005198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800519a:	bf00      	nop
 800519c:	e000ed08 	.word	0xe000ed08

080051a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80051a6:	4b44      	ldr	r3, [pc, #272]	; (80052b8 <xPortStartScheduler+0x118>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a44      	ldr	r2, [pc, #272]	; (80052bc <xPortStartScheduler+0x11c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d109      	bne.n	80051c4 <xPortStartScheduler+0x24>
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	e7fe      	b.n	80051c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051c4:	4b3c      	ldr	r3, [pc, #240]	; (80052b8 <xPortStartScheduler+0x118>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a3d      	ldr	r2, [pc, #244]	; (80052c0 <xPortStartScheduler+0x120>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d109      	bne.n	80051e2 <xPortStartScheduler+0x42>
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	e7fe      	b.n	80051e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051e2:	4b38      	ldr	r3, [pc, #224]	; (80052c4 <xPortStartScheduler+0x124>)
 80051e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	22ff      	movs	r2, #255	; 0xff
 80051f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005204:	b2da      	uxtb	r2, r3
 8005206:	4b30      	ldr	r3, [pc, #192]	; (80052c8 <xPortStartScheduler+0x128>)
 8005208:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800520a:	4b30      	ldr	r3, [pc, #192]	; (80052cc <xPortStartScheduler+0x12c>)
 800520c:	2207      	movs	r2, #7
 800520e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005210:	e009      	b.n	8005226 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005212:	4b2e      	ldr	r3, [pc, #184]	; (80052cc <xPortStartScheduler+0x12c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3b01      	subs	r3, #1
 8005218:	4a2c      	ldr	r2, [pc, #176]	; (80052cc <xPortStartScheduler+0x12c>)
 800521a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800521c:	78fb      	ldrb	r3, [r7, #3]
 800521e:	b2db      	uxtb	r3, r3
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	b2db      	uxtb	r3, r3
 8005224:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005226:	78fb      	ldrb	r3, [r7, #3]
 8005228:	b2db      	uxtb	r3, r3
 800522a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522e:	2b80      	cmp	r3, #128	; 0x80
 8005230:	d0ef      	beq.n	8005212 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005232:	4b26      	ldr	r3, [pc, #152]	; (80052cc <xPortStartScheduler+0x12c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f1c3 0307 	rsb	r3, r3, #7
 800523a:	2b04      	cmp	r3, #4
 800523c:	d009      	beq.n	8005252 <xPortStartScheduler+0xb2>
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	60bb      	str	r3, [r7, #8]
 8005250:	e7fe      	b.n	8005250 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005252:	4b1e      	ldr	r3, [pc, #120]	; (80052cc <xPortStartScheduler+0x12c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	021b      	lsls	r3, r3, #8
 8005258:	4a1c      	ldr	r2, [pc, #112]	; (80052cc <xPortStartScheduler+0x12c>)
 800525a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800525c:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <xPortStartScheduler+0x12c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005264:	4a19      	ldr	r2, [pc, #100]	; (80052cc <xPortStartScheduler+0x12c>)
 8005266:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	b2da      	uxtb	r2, r3
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005270:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <xPortStartScheduler+0x130>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a16      	ldr	r2, [pc, #88]	; (80052d0 <xPortStartScheduler+0x130>)
 8005276:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800527a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800527c:	4b14      	ldr	r3, [pc, #80]	; (80052d0 <xPortStartScheduler+0x130>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a13      	ldr	r2, [pc, #76]	; (80052d0 <xPortStartScheduler+0x130>)
 8005282:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005286:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005288:	f000 f8d6 	bl	8005438 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800528c:	4b11      	ldr	r3, [pc, #68]	; (80052d4 <xPortStartScheduler+0x134>)
 800528e:	2200      	movs	r2, #0
 8005290:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005292:	f000 f8f5 	bl	8005480 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005296:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <xPortStartScheduler+0x138>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a0f      	ldr	r2, [pc, #60]	; (80052d8 <xPortStartScheduler+0x138>)
 800529c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80052a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052a2:	f7ff ff69 	bl	8005178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80052a6:	f7ff f86b 	bl	8004380 <vTaskSwitchContext>
	prvTaskExitError();
 80052aa:	f7ff ff23 	bl	80050f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	e000ed00 	.word	0xe000ed00
 80052bc:	410fc271 	.word	0x410fc271
 80052c0:	410fc270 	.word	0x410fc270
 80052c4:	e000e400 	.word	0xe000e400
 80052c8:	20000d80 	.word	0x20000d80
 80052cc:	20000d84 	.word	0x20000d84
 80052d0:	e000ed20 	.word	0xe000ed20
 80052d4:	2000000c 	.word	0x2000000c
 80052d8:	e000ef34 	.word	0xe000ef34

080052dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052f4:	4b0e      	ldr	r3, [pc, #56]	; (8005330 <vPortEnterCritical+0x54>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3301      	adds	r3, #1
 80052fa:	4a0d      	ldr	r2, [pc, #52]	; (8005330 <vPortEnterCritical+0x54>)
 80052fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052fe:	4b0c      	ldr	r3, [pc, #48]	; (8005330 <vPortEnterCritical+0x54>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d10e      	bne.n	8005324 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005306:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <vPortEnterCritical+0x58>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d009      	beq.n	8005324 <vPortEnterCritical+0x48>
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	603b      	str	r3, [r7, #0]
 8005322:	e7fe      	b.n	8005322 <vPortEnterCritical+0x46>
	}
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	2000000c 	.word	0x2000000c
 8005334:	e000ed04 	.word	0xe000ed04

08005338 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800533e:	4b11      	ldr	r3, [pc, #68]	; (8005384 <vPortExitCritical+0x4c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d109      	bne.n	800535a <vPortExitCritical+0x22>
 8005346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	607b      	str	r3, [r7, #4]
 8005358:	e7fe      	b.n	8005358 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800535a:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <vPortExitCritical+0x4c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3b01      	subs	r3, #1
 8005360:	4a08      	ldr	r2, [pc, #32]	; (8005384 <vPortExitCritical+0x4c>)
 8005362:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005364:	4b07      	ldr	r3, [pc, #28]	; (8005384 <vPortExitCritical+0x4c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d104      	bne.n	8005376 <vPortExitCritical+0x3e>
 800536c:	2300      	movs	r3, #0
 800536e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	2000000c 	.word	0x2000000c
	...

08005390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005390:	f3ef 8009 	mrs	r0, PSP
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	4b15      	ldr	r3, [pc, #84]	; (80053f0 <pxCurrentTCBConst>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	f01e 0f10 	tst.w	lr, #16
 80053a0:	bf08      	it	eq
 80053a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80053a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053aa:	6010      	str	r0, [r2, #0]
 80053ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80053b4:	f380 8811 	msr	BASEPRI, r0
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f7fe ffde 	bl	8004380 <vTaskSwitchContext>
 80053c4:	f04f 0000 	mov.w	r0, #0
 80053c8:	f380 8811 	msr	BASEPRI, r0
 80053cc:	bc09      	pop	{r0, r3}
 80053ce:	6819      	ldr	r1, [r3, #0]
 80053d0:	6808      	ldr	r0, [r1, #0]
 80053d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d6:	f01e 0f10 	tst.w	lr, #16
 80053da:	bf08      	it	eq
 80053dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053e0:	f380 8809 	msr	PSP, r0
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	f3af 8000 	nop.w

080053f0 <pxCurrentTCBConst>:
 80053f0:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop

080053f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005410:	f7fe fefe 	bl	8004210 <xTaskIncrementTick>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800541a:	4b06      	ldr	r3, [pc, #24]	; (8005434 <SysTick_Handler+0x3c>)
 800541c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	2300      	movs	r3, #0
 8005424:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800542c:	bf00      	nop
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	e000ed04 	.word	0xe000ed04

08005438 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800543c:	4b0b      	ldr	r3, [pc, #44]	; (800546c <vPortSetupTimerInterrupt+0x34>)
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005442:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <vPortSetupTimerInterrupt+0x38>)
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005448:	4b0a      	ldr	r3, [pc, #40]	; (8005474 <vPortSetupTimerInterrupt+0x3c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a0a      	ldr	r2, [pc, #40]	; (8005478 <vPortSetupTimerInterrupt+0x40>)
 800544e:	fba2 2303 	umull	r2, r3, r2, r3
 8005452:	099b      	lsrs	r3, r3, #6
 8005454:	4a09      	ldr	r2, [pc, #36]	; (800547c <vPortSetupTimerInterrupt+0x44>)
 8005456:	3b01      	subs	r3, #1
 8005458:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800545a:	4b04      	ldr	r3, [pc, #16]	; (800546c <vPortSetupTimerInterrupt+0x34>)
 800545c:	2207      	movs	r2, #7
 800545e:	601a      	str	r2, [r3, #0]
}
 8005460:	bf00      	nop
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	e000e010 	.word	0xe000e010
 8005470:	e000e018 	.word	0xe000e018
 8005474:	20000000 	.word	0x20000000
 8005478:	10624dd3 	.word	0x10624dd3
 800547c:	e000e014 	.word	0xe000e014

08005480 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005480:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005490 <vPortEnableVFP+0x10>
 8005484:	6801      	ldr	r1, [r0, #0]
 8005486:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800548a:	6001      	str	r1, [r0, #0]
 800548c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800548e:	bf00      	nop
 8005490:	e000ed88 	.word	0xe000ed88

08005494 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800549a:	f3ef 8305 	mrs	r3, IPSR
 800549e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b0f      	cmp	r3, #15
 80054a4:	d913      	bls.n	80054ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80054a6:	4a16      	ldr	r2, [pc, #88]	; (8005500 <vPortValidateInterruptPriority+0x6c>)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4413      	add	r3, r2
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054b0:	4b14      	ldr	r3, [pc, #80]	; (8005504 <vPortValidateInterruptPriority+0x70>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	7afa      	ldrb	r2, [r7, #11]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d209      	bcs.n	80054ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80054ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	607b      	str	r3, [r7, #4]
 80054cc:	e7fe      	b.n	80054cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054ce:	4b0e      	ldr	r3, [pc, #56]	; (8005508 <vPortValidateInterruptPriority+0x74>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054d6:	4b0d      	ldr	r3, [pc, #52]	; (800550c <vPortValidateInterruptPriority+0x78>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d909      	bls.n	80054f2 <vPortValidateInterruptPriority+0x5e>
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	603b      	str	r3, [r7, #0]
 80054f0:	e7fe      	b.n	80054f0 <vPortValidateInterruptPriority+0x5c>
	}
 80054f2:	bf00      	nop
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	e000e3f0 	.word	0xe000e3f0
 8005504:	20000d80 	.word	0x20000d80
 8005508:	e000ed0c 	.word	0xe000ed0c
 800550c:	20000d84 	.word	0x20000d84

08005510 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	; 0x28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005518:	2300      	movs	r3, #0
 800551a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800551c:	f7fe fdbe 	bl	800409c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005520:	4b57      	ldr	r3, [pc, #348]	; (8005680 <pvPortMalloc+0x170>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005528:	f000 f90c 	bl	8005744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800552c:	4b55      	ldr	r3, [pc, #340]	; (8005684 <pvPortMalloc+0x174>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	f040 808c 	bne.w	8005652 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01c      	beq.n	800557a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005540:	2208      	movs	r2, #8
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4413      	add	r3, r2
 8005546:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	2b00      	cmp	r3, #0
 8005550:	d013      	beq.n	800557a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f023 0307 	bic.w	r3, r3, #7
 8005558:	3308      	adds	r3, #8
 800555a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	2b00      	cmp	r3, #0
 8005564:	d009      	beq.n	800557a <pvPortMalloc+0x6a>
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	e7fe      	b.n	8005578 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d068      	beq.n	8005652 <pvPortMalloc+0x142>
 8005580:	4b41      	ldr	r3, [pc, #260]	; (8005688 <pvPortMalloc+0x178>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	429a      	cmp	r2, r3
 8005588:	d863      	bhi.n	8005652 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800558a:	4b40      	ldr	r3, [pc, #256]	; (800568c <pvPortMalloc+0x17c>)
 800558c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800558e:	4b3f      	ldr	r3, [pc, #252]	; (800568c <pvPortMalloc+0x17c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005594:	e004      	b.n	80055a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d903      	bls.n	80055b2 <pvPortMalloc+0xa2>
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1f1      	bne.n	8005596 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055b2:	4b33      	ldr	r3, [pc, #204]	; (8005680 <pvPortMalloc+0x170>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d04a      	beq.n	8005652 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2208      	movs	r2, #8
 80055c2:	4413      	add	r3, r2
 80055c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	1ad2      	subs	r2, r2, r3
 80055d6:	2308      	movs	r3, #8
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	429a      	cmp	r2, r3
 80055dc:	d91e      	bls.n	800561c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4413      	add	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d009      	beq.n	8005604 <pvPortMalloc+0xf4>
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	e7fe      	b.n	8005602 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	1ad2      	subs	r2, r2, r3
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005616:	69b8      	ldr	r0, [r7, #24]
 8005618:	f000 f8f6 	bl	8005808 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800561c:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <pvPortMalloc+0x178>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	4a18      	ldr	r2, [pc, #96]	; (8005688 <pvPortMalloc+0x178>)
 8005628:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800562a:	4b17      	ldr	r3, [pc, #92]	; (8005688 <pvPortMalloc+0x178>)
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	4b18      	ldr	r3, [pc, #96]	; (8005690 <pvPortMalloc+0x180>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d203      	bcs.n	800563e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005636:	4b14      	ldr	r3, [pc, #80]	; (8005688 <pvPortMalloc+0x178>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a15      	ldr	r2, [pc, #84]	; (8005690 <pvPortMalloc+0x180>)
 800563c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	4b10      	ldr	r3, [pc, #64]	; (8005684 <pvPortMalloc+0x174>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	431a      	orrs	r2, r3
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005652:	f7fe fd31 	bl	80040b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	2b00      	cmp	r3, #0
 800565e:	d009      	beq.n	8005674 <pvPortMalloc+0x164>
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	e7fe      	b.n	8005672 <pvPortMalloc+0x162>
	return pvReturn;
 8005674:	69fb      	ldr	r3, [r7, #28]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3728      	adds	r7, #40	; 0x28
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20004990 	.word	0x20004990
 8005684:	2000499c 	.word	0x2000499c
 8005688:	20004994 	.word	0x20004994
 800568c:	20004988 	.word	0x20004988
 8005690:	20004998 	.word	0x20004998

08005694 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d046      	beq.n	8005734 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056a6:	2308      	movs	r3, #8
 80056a8:	425b      	negs	r3, r3
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4413      	add	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	4b20      	ldr	r3, [pc, #128]	; (800573c <vPortFree+0xa8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4013      	ands	r3, r2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d109      	bne.n	80056d6 <vPortFree+0x42>
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	e7fe      	b.n	80056d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d009      	beq.n	80056f2 <vPortFree+0x5e>
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	60bb      	str	r3, [r7, #8]
 80056f0:	e7fe      	b.n	80056f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	4b11      	ldr	r3, [pc, #68]	; (800573c <vPortFree+0xa8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4013      	ands	r3, r2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d019      	beq.n	8005734 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d115      	bne.n	8005734 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	4b0b      	ldr	r3, [pc, #44]	; (800573c <vPortFree+0xa8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	43db      	mvns	r3, r3
 8005712:	401a      	ands	r2, r3
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005718:	f7fe fcc0 	bl	800409c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	4b07      	ldr	r3, [pc, #28]	; (8005740 <vPortFree+0xac>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4413      	add	r3, r2
 8005726:	4a06      	ldr	r2, [pc, #24]	; (8005740 <vPortFree+0xac>)
 8005728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800572a:	6938      	ldr	r0, [r7, #16]
 800572c:	f000 f86c 	bl	8005808 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005730:	f7fe fcc2 	bl	80040b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005734:	bf00      	nop
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	2000499c 	.word	0x2000499c
 8005740:	20004994 	.word	0x20004994

08005744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800574a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800574e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005750:	4b27      	ldr	r3, [pc, #156]	; (80057f0 <prvHeapInit+0xac>)
 8005752:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00c      	beq.n	8005778 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3307      	adds	r3, #7
 8005762:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0307 	bic.w	r3, r3, #7
 800576a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	4a1f      	ldr	r2, [pc, #124]	; (80057f0 <prvHeapInit+0xac>)
 8005774:	4413      	add	r3, r2
 8005776:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800577c:	4a1d      	ldr	r2, [pc, #116]	; (80057f4 <prvHeapInit+0xb0>)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005782:	4b1c      	ldr	r3, [pc, #112]	; (80057f4 <prvHeapInit+0xb0>)
 8005784:	2200      	movs	r2, #0
 8005786:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	4413      	add	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005790:	2208      	movs	r2, #8
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0307 	bic.w	r3, r3, #7
 800579e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4a15      	ldr	r2, [pc, #84]	; (80057f8 <prvHeapInit+0xb4>)
 80057a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057a6:	4b14      	ldr	r3, [pc, #80]	; (80057f8 <prvHeapInit+0xb4>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2200      	movs	r2, #0
 80057ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057ae:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <prvHeapInit+0xb4>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	1ad2      	subs	r2, r2, r3
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057c4:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <prvHeapInit+0xb4>)
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	4a0a      	ldr	r2, [pc, #40]	; (80057fc <prvHeapInit+0xb8>)
 80057d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	4a09      	ldr	r2, [pc, #36]	; (8005800 <prvHeapInit+0xbc>)
 80057da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057dc:	4b09      	ldr	r3, [pc, #36]	; (8005804 <prvHeapInit+0xc0>)
 80057de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057e2:	601a      	str	r2, [r3, #0]
}
 80057e4:	bf00      	nop
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	20000d88 	.word	0x20000d88
 80057f4:	20004988 	.word	0x20004988
 80057f8:	20004990 	.word	0x20004990
 80057fc:	20004998 	.word	0x20004998
 8005800:	20004994 	.word	0x20004994
 8005804:	2000499c 	.word	0x2000499c

08005808 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005810:	4b28      	ldr	r3, [pc, #160]	; (80058b4 <prvInsertBlockIntoFreeList+0xac>)
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	e002      	b.n	800581c <prvInsertBlockIntoFreeList+0x14>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	429a      	cmp	r2, r3
 8005824:	d8f7      	bhi.n	8005816 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	4413      	add	r3, r2
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	429a      	cmp	r2, r3
 8005836:	d108      	bne.n	800584a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	441a      	add	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	441a      	add	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d118      	bne.n	8005890 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	4b15      	ldr	r3, [pc, #84]	; (80058b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d00d      	beq.n	8005886 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	441a      	add	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	e008      	b.n	8005898 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005886:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	e003      	b.n	8005898 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	429a      	cmp	r2, r3
 800589e:	d002      	beq.n	80058a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058a6:	bf00      	nop
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	20004988 	.word	0x20004988
 80058b8:	20004990 	.word	0x20004990

080058bc <__libc_init_array>:
 80058bc:	b570      	push	{r4, r5, r6, lr}
 80058be:	4e0d      	ldr	r6, [pc, #52]	; (80058f4 <__libc_init_array+0x38>)
 80058c0:	4c0d      	ldr	r4, [pc, #52]	; (80058f8 <__libc_init_array+0x3c>)
 80058c2:	1ba4      	subs	r4, r4, r6
 80058c4:	10a4      	asrs	r4, r4, #2
 80058c6:	2500      	movs	r5, #0
 80058c8:	42a5      	cmp	r5, r4
 80058ca:	d109      	bne.n	80058e0 <__libc_init_array+0x24>
 80058cc:	4e0b      	ldr	r6, [pc, #44]	; (80058fc <__libc_init_array+0x40>)
 80058ce:	4c0c      	ldr	r4, [pc, #48]	; (8005900 <__libc_init_array+0x44>)
 80058d0:	f000 f83a 	bl	8005948 <_init>
 80058d4:	1ba4      	subs	r4, r4, r6
 80058d6:	10a4      	asrs	r4, r4, #2
 80058d8:	2500      	movs	r5, #0
 80058da:	42a5      	cmp	r5, r4
 80058dc:	d105      	bne.n	80058ea <__libc_init_array+0x2e>
 80058de:	bd70      	pop	{r4, r5, r6, pc}
 80058e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058e4:	4798      	blx	r3
 80058e6:	3501      	adds	r5, #1
 80058e8:	e7ee      	b.n	80058c8 <__libc_init_array+0xc>
 80058ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058ee:	4798      	blx	r3
 80058f0:	3501      	adds	r5, #1
 80058f2:	e7f2      	b.n	80058da <__libc_init_array+0x1e>
 80058f4:	08005a34 	.word	0x08005a34
 80058f8:	08005a34 	.word	0x08005a34
 80058fc:	08005a34 	.word	0x08005a34
 8005900:	08005a38 	.word	0x08005a38

08005904 <memcmp>:
 8005904:	b530      	push	{r4, r5, lr}
 8005906:	2400      	movs	r4, #0
 8005908:	42a2      	cmp	r2, r4
 800590a:	d101      	bne.n	8005910 <memcmp+0xc>
 800590c:	2000      	movs	r0, #0
 800590e:	e007      	b.n	8005920 <memcmp+0x1c>
 8005910:	5d03      	ldrb	r3, [r0, r4]
 8005912:	3401      	adds	r4, #1
 8005914:	190d      	adds	r5, r1, r4
 8005916:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800591a:	42ab      	cmp	r3, r5
 800591c:	d0f4      	beq.n	8005908 <memcmp+0x4>
 800591e:	1b58      	subs	r0, r3, r5
 8005920:	bd30      	pop	{r4, r5, pc}

08005922 <memcpy>:
 8005922:	b510      	push	{r4, lr}
 8005924:	1e43      	subs	r3, r0, #1
 8005926:	440a      	add	r2, r1
 8005928:	4291      	cmp	r1, r2
 800592a:	d100      	bne.n	800592e <memcpy+0xc>
 800592c:	bd10      	pop	{r4, pc}
 800592e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005932:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005936:	e7f7      	b.n	8005928 <memcpy+0x6>

08005938 <memset>:
 8005938:	4402      	add	r2, r0
 800593a:	4603      	mov	r3, r0
 800593c:	4293      	cmp	r3, r2
 800593e:	d100      	bne.n	8005942 <memset+0xa>
 8005940:	4770      	bx	lr
 8005942:	f803 1b01 	strb.w	r1, [r3], #1
 8005946:	e7f9      	b.n	800593c <memset+0x4>

08005948 <_init>:
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	bf00      	nop
 800594c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594e:	bc08      	pop	{r3}
 8005950:	469e      	mov	lr, r3
 8005952:	4770      	bx	lr

08005954 <_fini>:
 8005954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005956:	bf00      	nop
 8005958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595a:	bc08      	pop	{r3}
 800595c:	469e      	mov	lr, r3
 800595e:	4770      	bx	lr
